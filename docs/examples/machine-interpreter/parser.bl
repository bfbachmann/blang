use {malloc, realloc, free}: "std/libc/mem.bl"
use {strtol, strncmp}: "std/libc/string.bl"

use {assert}: "docs/examples/machine-interpreter/utils.bl"

/// Represents a machine instruction.
pub struct Instruction {
    pub kind: InstKind
    pub operands: {int, int}
}

impl Instruction {
    fn new_nop(): Instruction {
        return Instruction{
            kind: InstKind::JumpIf0
            operands: {1, 0}
        }
    }
}

/// Represents a kind of instruction.
pub enum InstKind {
    /// Stores the immediate `value` into memory at the location `dst_loc`.
    /// Example: Store the value 234 into memory at address 9
    ///     store 234 #9
    Store

    /// Copies a value from one location in memory to another.
    /// Example: Copy the value from address 8 to address 3
    ///     copy #8 #3
    Copy

    /// Adds a value from one location in memory to another.
    /// Example: Add the value at address 3 to the value at address 4
    ///          and store the result in address 4.
    ///     add #3 #4
    Add

    /// Jumps to a designation instruction number if the value at the given
    /// address is 0.
    /// Example: Jump to instruction 3 if the value at address 8 is 0.
    ///     jumpif0 #8 #3
    JumpIf0
}

/// A program is just an array of instructions.
pub struct Program {
    instructions: *mut Instruction
    len: uint
    cap: uint
}

impl Program {
    pub fn new(): Program {
        return Program{
            instructions: null
            len: 0
            cap: 0
        }
    }

    /// Returns the number of instructions in the program.
    pub fn len(*self): uint {
        return self^.len
    }

    /// Increases the amount of heap memory allocated to store this program's
    /// instructions.
    fn grow(*mut self) {
        let mut new_cap = self^.cap * 2
        if new_cap == 0 {
            new_cap = 128
        }

        self^.instructions = realloc(
            self^.instructions as *u8,
            sizeof Instruction * new_cap,
        ) as *mut Instruction
        self^.cap = new_cap
    }

    /// Adds the given instruction to the program.
    fn push_inst(*mut self, inst: Instruction) {
        if self^.len == self^.cap {
            self.grow()
        }

        let inst_ptr = self.inst_ptr_mut(self^.len)
        inst_ptr^ = inst
        self^.len += 1
    }

    /// Returns a `*mut` to the instruction at the given index.
    fn inst_ptr_mut(*mut self, index: uint): *mut Instruction {
        assert(index < self^.cap, "instruction index out of bounds")
        return self^.instructions + (index * sizeof Instruction) as *Instruction
    }

    /// Returns a pointer to the instruction at the given index.
    pub fn inst_at(*self, index: uint): *Instruction {
        assert(index < self^.len, "instruction index out of bounds")
        return self^.instructions.(index as int)
    }

    /// Frees heap memory associated with this program.
    pub fn free(self) {
        free(self.instructions as *u8)
    }
}

/// Indicates whether parsing succeeded.
enum ParseStatus {
    /// Parsing succeeded, but there is more to parse.
    Ok
    /// Parsing complete.
    Done
    /// Parsing failed.
    Err
}

/// Represents the result of parsing.
struct ParseResult {
    status: ParseStatus
    inst: Instruction
    msg: str
}

impl ParseResult {
    fn new_ok(inst: Instruction): ParseResult {
        return ParseResult{
            status: ParseStatus::Ok
            inst: inst
            msg: ""
        }
    }

    fn new_err(msg: str): ParseResult {
        return ParseResult{
            status: ParseStatus::Err
            inst: Instruction.new_nop()
            msg: msg
        }
    }

    fn new_done(): ParseResult {
        return ParseResult{
            status: ParseStatus::Done
            inst: Instruction.new_nop()
            msg: ""
        }
    }
}

/// Parses a program from a character buffer.
pub struct Parser {
    buf: *u8
    buf_len: uint
    cursor: uint
    inst_count: uint
}

impl Parser {
    /// Returns a new parser for parsing the instructions in `buf` with a length of `buf_len` bytes.
    pub fn new(buf: *u8, buf_len: uint): Parser {
        return Parser{
            buf: buf
            buf_len: buf_len
            cursor: 0
            inst_count: 0
        }
    }

    /// Parses the program stored in the parser and returns the result. This function
    /// will abort with an error message if the program is syntactically invalid.
    pub fn parse_prog(*mut self): Program {
        let mut prog = Program.new()
        loop {
            let result = self.try_parse_inst()
            assert(result.status !~ ParseStatus::Err, result.msg)
    
            if result.status ~~ ParseStatus::Done {
                return prog
            }
    
            prog.push_inst(result.inst)
        }
    }

    /// Tries to parse an instruction from the current position in the program
    /// buffer and returns the result.
    fn try_parse_inst(*mut self): ParseResult {
        // Remove all leading whitespace
        self.parse_spaces()

        // Check if we're at the end of the buffer
        if self^.cursor >= self^.buf_len {
            return ParseResult.new_done()
        }

        // Increment instruction counter
        self^.inst_count += 1

        // Try parse an instruction
        {
            if self.try_parse("store") {
                return self.try_parse_store_operands()
            }

            if self.try_parse("copy") {
                return self.try_parse_copy_operands()
            }

            if self.try_parse("add") {
                return self.try_parse_add_operands()
            }

            if self.try_parse("jumpif0") {
                return self.try_parse_jump_operands()
            }
        }

        return ParseResult.new_err("unrecognized instruction")
    }

    /// Tries to parse store instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_store_operands(*mut self): ParseResult {
        self.parse_spaces()

        // Parse first operand
        let value_result = self.try_parse_int()
        if !value_result.(1) {
            return ParseResult.new_err("invalid integer value in first 'store' operand")
        }
        
        self.parse_spaces()
        
        // Parse second operand
        let addr_result = self.try_parse_addr()
        if !addr_result.(1) {
            return ParseResult.new_err("invalid address in second 'store' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Store
            operands: {value_result.(0), addr_result.(0)}
        })
    }

    /// Tries to parse copy instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_copy_operands(*mut self): ParseResult {
        self.parse_spaces()

        // Parse first operand
        let src_addr_result = self.try_parse_addr()
        if !src_addr_result.(1) {
            return ParseResult.new_err("invalid address in first 'copy' operand")
        }
        
        self.parse_spaces()
        
        // Parse second operand
        let dst_addr_result = self.try_parse_addr()
        if !dst_addr_result.(1) {
            return ParseResult.new_err("invalid address in second 'copy' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Copy
            operands: {src_addr_result.(0), dst_addr_result.(0)}
        })
    }

    /// Tries to parse add instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_add_operands(*mut self): ParseResult {
        self.parse_spaces()

        // Parse first operand
        let src_addr_result = self.try_parse_addr()
        if !src_addr_result.(1) {
            return ParseResult.new_err("invalid address in first 'add' operand")
        }
        
        self.parse_spaces()
        
        // Parse second operand
        let dst_addr_result = self.try_parse_addr()
        if !dst_addr_result.(1) {
            return ParseResult.new_err("invalid address in second 'add' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Add
            operands: {src_addr_result.(0), dst_addr_result.(0)}
        })
    }

    /// Tries to parse jumpif0 instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_jump_operands(*mut self): ParseResult {
        self.parse_spaces()

        // Parse first operand
        let src_addr_result = self.try_parse_addr()
        if !src_addr_result.(1) {
            return ParseResult.new_err("invalid address in first 'jumpif0' operand")
        }
        
        self.parse_spaces()
        
        // Parse second operand
        let dst_addr_result = self.try_parse_addr()
        if !dst_addr_result.(1) {
            return ParseResult.new_err("invalid address in second 'jumpif0' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::JumpIf0
            operands: {src_addr_result.(0), dst_addr_result.(0)}
        })
    }

    /// Tries to parse an address from the current location in the
    /// program buffer and returns the result with `true` if successful, and
    /// `false` otherwise.
    fn try_parse_addr(*mut self): {int, bool} {
        if !self.try_parse("#") {
            return {0, false}
        }

        let result = self.try_parse_int()

        // Make sure the address is not a negative number
        if result.(0) < 0 {
            return {0, false}
        }

        return result 
    }

    /// Tries to parse an integer from the current location in the program buffer
    /// and returns the result with `true` if successful, and `false` otherwise.
    fn try_parse_int(*mut self): {int, bool} {
        let mut end_ptr = self.buf_at_cursor()
        let value = strtol(end_ptr, &mut end_ptr, 10)
        let num_chars = end_ptr as int - self.buf_at_cursor() as int
        self.move_cursor(num_chars)
        return {value, num_chars > 0}
    }

    /// Parses all spaces at the current location in the program buffer.
    fn parse_spaces(*mut self) {
        while self.try_parse(" ")
            or self.try_parse("\t")
            or self.try_parse("\n")
        {}
    }

    /// Tries to parse the given `str` from the current location in the buffer
    /// and returns `true` if successful.
    fn try_parse(*mut self, s: str): bool {
        if self.buf_starts_with(s) {
            self.move_cursor(s.len() as int)
            return true
        }

        return false
    }

    /// Moves the parser's cursor in the buffer by the given offset.
    fn move_cursor(*mut self, offset: int) {
        let new_cursor = (self^.cursor as int + offset) as uint

        // Make sure not to overrun the buffer
        if new_cursor >= self^.buf_len {
            self^.cursor = self^.buf_len
            return
        }

        self^.cursor = new_cursor
    }

    /// Returns a pointer to the parser's current position in the program buffer.
    fn buf_at_cursor(*self): *u8 {
        return self^.buf.(self^.cursor as int)
    }

    /// Returns `true` if the program buffer starting at the parser's current position
    /// contains `s`.
    fn buf_starts_with(*self, s: str): bool {
        return strncmp(self.buf_at_cursor(), s as *u8, s.len()) == 0
    }
}

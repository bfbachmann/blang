use "std/libc/string.bl"
use "std/libc/mem.bl"

use "machine-interpreter/utils.bl"

/// Represents a machine instruction.
struct Instruction {
    kind: InstKind
    operands: {int, int}
}

impl Instruction {
    fn new_nop(): Instruction {
        return Instruction{
            kind: InstKind::JumpIf0
            operands: {1, 0}
        }
    }
}

/// Represents a kind of instruction.
enum InstKind {
    /// Stores the immediate `value` into memory at the location `dst_loc`.
    /// Example: Store the value 234 into memory at address 9
    ///     store 234 #9
    Store

    /// Copies a value from one location in memory to another.
    /// Example: Copy the value from address 8 to address 3
    ///     copy #8 #3
    Copy

    /// Adds a value from one location in memory to another.
    /// Example: Add the value at address 3 to the value at address 4
    ///          and store the result in address 4.
    ///     add #3 #4
    Add

    /// Jumps to a designation instruction number if the value at the given
    /// address is 0.
    /// Example: Jump to instruction 3 if the value at address 8 is 0.
    ///     jumpif0 #8 #3
    JumpIf0
}

/// A program is just an array of instructions.
struct Program {
    instructions: *mut Instruction
    len: uint
    cap: uint
}

impl Program {
    fn new(): Program {
        return Program{
            instructions: malloc(0) as *mut Instruction
            len: 0
            cap: 0
        }
    }

    /// Increases the amount of heap memory allocated to store this program's
    /// instructions.
    fn grow(prog: *mut Program) {
        let mut new_cap = prog?.cap * 2
        if new_cap == 0 {
            new_cap = 128
        }

        prog?.instructions = realloc(
            prog?.instructions as *u8,
            sizeof Instruction * new_cap,
        ) as *mut Instruction
        prog?.cap = new_cap
    }

    /// Adds the given instruction to the program.
    fn push_inst(prog: *mut Program, inst: Instruction) {
        if prog?.len == prog?.cap {
            Program.grow(prog)
        }

        let inst_ptr = Program.inst_ptr_mut(prog, prog?.len)
        inst_ptr? = inst
        prog?.len = prog?.len + 1
    }

    /// Returns a `*mut` to the instruction at the given index.
    fn inst_ptr_mut(prog: *mut Program, index: uint): *mut Instruction {
        assert(index < prog?.cap, "instruction index out of bounds")
        return prog?.instructions + (index * sizeof Instruction) as *Instruction
    }

    /// Returns a pointer to the instruction at the given index.
    fn inst_at(prog: *Program, index: uint): *Instruction {
        assert(index < prog?.len, "instruction index out of bounds")
        return prog?.instructions + (index * sizeof Instruction) as *Instruction
    }

    /// Frees heap memory associated with this program.
    fn free(prog: Program) {
        free(prog.instructions as *u8)
    }
}

/// Indicates whether parsing succeeded.
enum ParseStatus {
    /// Parsing succeeded, but there is more to parse.
    Ok
    /// Parsing complete.
    Done
    /// Parsing failed.
    Err
}

/// Represents the result of parsing.
struct ParseResult {
    status: ParseStatus
    inst: Instruction
    msg: str
}

impl ParseResult {
    fn new_ok(inst: Instruction): ParseResult {
        return ParseResult{
            status: ParseStatus::Ok
            inst: inst
            msg: ""
        }
    }

    fn new_err(msg: str): ParseResult {
        return ParseResult{
            status: ParseStatus::Err
            inst: Instruction.new_nop()
            msg: msg
        }
    }

    fn new_done(): ParseResult {
        return ParseResult{
            status: ParseStatus::Done
            inst: Instruction.new_nop()
            msg: ""
        }
    }
}

/// Parses a program from a character buffer.
struct Parser {
    buf: *u8
    buf_len: uint
    cursor: uint
    inst_count: uint
}

impl Parser {
    /// Returns a new parser for parsing the instructions in `buf` with a length of `buf_len` bytes.
    fn new(buf: *u8, buf_len: uint): Parser {
        return Parser{
            buf: buf
            buf_len: buf_len
            cursor: 0
            inst_count: 0
        }
    }

    /// Parses the program stored in the parser and returns the result. This function
    /// will abort with an error message if the program is syntactically invalid.
    fn parse_prog(parser: *mut Parser): Program {
        let mut prog = Program.new()
        loop {
            let result = Parser.try_parse_inst(parser)
            assert(result.status ~!= ParseStatus::Err, result.msg)
    
            if result.status ~== ParseStatus::Done {
                return prog
            }
    
            Program.push_inst(&mut prog, result.inst)
        }
    }

    /// Tries to parse an instruction from the current position in the program
    /// buffer and returns the result.
    fn try_parse_inst(parser: *mut Parser): ParseResult {
        // Remove all leading whitespace
        Parser.parse_spaces(parser)

        // Check if we're at the end of the buffer
        if parser?.cursor >= parser?.buf_len {
            return ParseResult.new_done()
        }

        // Increment instruction counter
        parser?.inst_count = parser?.inst_count + 1

        // Try parse an instruction
        {
            if Parser.try_parse(parser, "store") {
                return Parser.try_parse_store_operands(parser)
            }

            if Parser.try_parse(parser, "copy") {
                return Parser.try_parse_copy_operands(parser)
            }

            if Parser.try_parse(parser, "add") {
                return Parser.try_parse_add_operands(parser)
            }

            if Parser.try_parse(parser, "jumpif0") {
                return Parser.try_parse_jump_operands(parser)
            }
        }

        return ParseResult.new_err("unrecognized instruction")
    }

    /// Tries to parse store instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_store_operands(parser: *mut Parser): ParseResult {
        Parser.parse_spaces(parser)

        // Parse first operand
        let value_result = Parser.try_parse_int(parser)
        if !value_result.1 {
            return ParseResult.new_err("invalid integer value in first 'store' operand")
        }
        
        Parser.parse_spaces(parser)
        
        // Parse second operand
        let addr_result = Parser.try_parse_addr(parser)
        if !addr_result.1 {
            return ParseResult.new_err("invalid address in second 'store' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Store
            operands: {value_result.0, addr_result.0}
        })
    }

    /// Tries to parse copy instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_copy_operands(parser: *mut Parser): ParseResult {
        Parser.parse_spaces(parser)

        // Parse first operand
        let src_addr_result = Parser.try_parse_addr(parser)
        if !src_addr_result.1 {
            return ParseResult.new_err("invalid address in first 'copy' operand")
        }
        
        Parser.parse_spaces(parser)
        
        // Parse second operand
        let dst_addr_result = Parser.try_parse_addr(parser)
        if !dst_addr_result.1 {
            return ParseResult.new_err("invalid address in second 'copy' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Copy
            operands: {src_addr_result.0, dst_addr_result.0}
        })
    }

    /// Tries to parse add instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_add_operands(parser: *mut Parser): ParseResult {
        Parser.parse_spaces(parser)

        // Parse first operand
        let src_addr_result = Parser.try_parse_addr(parser)
        if !src_addr_result.1 {
            return ParseResult.new_err("invalid address in first 'add' operand")
        }
        
        Parser.parse_spaces(parser)
        
        // Parse second operand
        let dst_addr_result = Parser.try_parse_addr(parser)
        if !dst_addr_result.1 {
            return ParseResult.new_err("invalid address in second 'add' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::Add
            operands: {src_addr_result.0, dst_addr_result.0}
        })
    }

    /// Tries to parse jumpif0 instruction operands from the current location in the
    /// program buffer and returns the result.
    fn try_parse_jump_operands(parser: *mut Parser): ParseResult {
        Parser.parse_spaces(parser)

        // Parse first operand
        let src_addr_result = Parser.try_parse_addr(parser)
        if !src_addr_result.1 {
            return ParseResult.new_err("invalid address in first 'jumpif0' operand")
        }
        
        Parser.parse_spaces(parser)
        
        // Parse second operand
        let dst_addr_result = Parser.try_parse_addr(parser)
        if !dst_addr_result.1 {
            return ParseResult.new_err("invalid address in second 'jumpif0' operand")
        }

        return ParseResult.new_ok(Instruction{
            kind: InstKind::JumpIf0
            operands: {src_addr_result.0, dst_addr_result.0}
        })
    }

    /// Tries to parse an address from the current location in the
    /// program buffer and returns the result with `true` if successful, and
    /// `false` otherwise.
    fn try_parse_addr(parser: *mut Parser): {int, bool} {
        if !Parser.try_parse(parser, "#") {
            return {0, false}
        }

        let result = Parser.try_parse_int(parser)

        // Make sure the address is not a negative number
        if result.0 < 0 {
            return {0, false}
        }

        return result 
    }

    /// Tries to parse an integer from the current location in the program buffer
    /// and returns the result with `true` if successful, and `false` otherwise.
    fn try_parse_int(parser: *mut Parser): {int, bool} {
        let mut end_ptr = Parser.buf_at_cursor(parser)
        let value = strtol(end_ptr, &mut end_ptr, 10)
        let num_chars = end_ptr as int - Parser.buf_at_cursor(parser) as int
        Parser.move_cursor(parser, num_chars)
        return {value, num_chars > 0}
    }

    /// Parses all spaces at the current location in the program buffer.
    fn parse_spaces(parser: *mut Parser) {
        while Parser.try_parse(parser, " ")
            or Parser.try_parse(parser, "\t")
            or Parser.try_parse(parser, "\n")
        {}
    }

    /// Tries to parse the given `str` from the current location in the buffer
    /// and returns `true` if successful.
    fn try_parse(parser: *mut Parser, s: str): bool {
        if Parser.buf_starts_with(parser, s) {
            Parser.move_cursor(parser, s.len() as int)
            return true
        }

        return false
    }

    /// Moves the parser's cursor in the buffer by the given offset.
    fn move_cursor(parser: *mut Parser, offset: int) {
        let new_cursor = (parser?.cursor as int + offset) as uint

        // Make sure not to overrun the buffer
        if new_cursor >= parser?.buf_len {
            parser?.cursor = parser?.buf_len
            return
        }

        parser?.cursor = new_cursor
    }

    /// Returns a pointer to the parser's current position in the program buffer.
    fn buf_at_cursor(parser: *Parser): *u8 {
        return (parser?.buf as int + parser?.cursor as int) as *u8
    }

    /// Returns `true` if the program buffer starting at the parser's current position
    /// contains `s`.
    fn buf_starts_with(parser: *Parser, s: str): bool {
        return strncmp(Parser.buf_at_cursor(parser), s as *u8, s.len()) == 0
    }
}

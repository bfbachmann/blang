use {Program, Instruction, InstKind}: "docs/examples/machine-interpreter/parser.bl"
use {print_str}: "docs/examples/machine-interpreter/utils.bl"

const mem_size: uint = 1024

/// A machine executes a program by manipulating its memory according
/// to program instructions.
struct Machine {
    memory: [int; mem_size]
    prog: *Program
    pc: uint
}

/// The result of instruction execution.
struct ExecResult {
    status: ExecStatus
    msg: str
}

/// Indicates whether execution succeeded.
enum ExecStatus {
    Ok
    Err
}

impl ExecResult {
    fn new_ok(): ExecResult {
        return ExecResult{
            status: ExecStatus::Ok
            msg: ""
        }
    }

    fn new_err(msg: str): ExecResult {
        return ExecResult{
            status: ExecStatus::Err
            msg: msg
        }
    }
}

impl Machine {
    /// Creates a new machine for executing the given program.
    fn new(prog: *Program): Machine {
        return Machine{
            memory: [0; mem_size]
            prog: prog
            pc: 0
        }
    }

    /// Executes the program associated with the machine and returns a result
    /// indicating whether execution succeeded.
    fn exec_prog(machine: *mut Machine): ExecResult {
        for machine^.pc = 0,
            machine^.pc < machine^.prog^.len,
            machine^.pc = machine^.pc + 1
        {
            let inst_ptr = Program.inst_at(machine^.prog, machine^.pc)
            let result = Machine.exec_inst(machine, inst_ptr)
            if result.status ~~ ExecStatus::Err {
                return result
            }
        }

        return ExecResult.new_ok()
    }


    /// Executes an instruction.
    fn exec_inst(machine: *mut Machine, inst: *Instruction): ExecResult {
        if inst^.kind ~~ InstKind::Store {
            print_str("store\n")
            return Machine.store(machine, inst^.operands.(0), inst^.operands.(1) as uint)
        }

        if inst^.kind ~~ InstKind::Copy {
            print_str("copy\n")
            return Machine.copy(machine, inst^.operands.(0) as uint, inst^.operands.(1) as uint)
        }

        if inst^.kind ~~ InstKind::Add {
            print_str("add\n")
            return Machine.add(machine, inst^.operands.(0) as uint, inst^.operands.(1) as uint)
        }

        if inst^.kind ~~ InstKind::JumpIf0 {
            print_str("jumpif0\n")
            return Machine.jumpif0(machine, inst^.operands.(0) as uint, inst^.operands.(1) as uint)
        }

        return ExecResult.new_err("unimplemented instruction")
    }

    /// Executes a store instruction.
    fn store(machine: *mut Machine, value: int, addr: uint): ExecResult {
        if addr >= mem_size {
            return ExecResult.new_err("store address out of bounds")
        }

        machine^.memory.(addr) = value
        return ExecResult.new_ok()
    }

    /// Executes a copy instruction.
    fn copy(machine: *mut Machine, src_addr: uint, dst_addr: uint): ExecResult {
        if src_addr >= mem_size {
            return ExecResult.new_err("copy source address out of bounds")
        }

        if dst_addr >= mem_size {
            return ExecResult.new_err("copy destination address out of bounds")
        }

        machine^.memory.(dst_addr) = machine^.memory.(src_addr)
        return ExecResult.new_ok()
    }

    /// Executes an add instruction.
    fn add(machine: *mut Machine, src_addr: uint, dst_addr: uint): ExecResult {
        if src_addr >= mem_size {
            return ExecResult.new_err("add source address out of bounds")
        }

        if dst_addr >= mem_size {
            return ExecResult.new_err("add destination address out of bounds")
        }

        machine^.memory.(dst_addr) = machine^.memory.(src_addr) + machine^.memory.(dst_addr)
        return ExecResult.new_ok()
    }

    /// Executes a jumpif0 instruction.
    fn jumpif0(machine: *mut Machine, src_addr: uint, dst_inst: uint): ExecResult {
        if src_addr >= mem_size {
            return ExecResult.new_err("jumpif0 source address out of bounds")
        }

        if dst_inst >= machine^.prog^.len {
            return ExecResult.new_err("jumpif0 destination address out of bounds")
        }

        if machine^.memory.(src_addr) == 0 {
            machine^.pc = dst_inst - 1
        }

        return ExecResult.new_ok()
    }
}

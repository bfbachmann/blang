use {exit}: "std/libc/proc.bl"
use {panic}: "std/backtrace/panic.bl"
use {List}: "std/types/list.bl"
use {Clone}: "std/specs/clone.bl"
use {Ord, Order}: "std/specs/ord.bl"
use {LibcAllocator}: "std/mem/libc_allocator.bl"
use {new_dyn_allocator}: "std/mem/dyn_allocator.bl"

fn main() {
    // Created a list and populate it.
    let mut allocator = new_dyn_allocator[LibcAllocator](&mut LibcAllocator{})
    let mut list = List[Value].new(&mut allocator)
    for let mut i = 10, i >= 0, i -= 1 {
        list.push(Value{v: i})
    }

    // Sort the list.
    sort[Value](&mut list)

    // Check that the list is sorted correctly.
    if !is_sorted[Value](&list) {
        panic("list is not sorted")
    }

    exit(0)
}

/// Just contains an int and can be ordered and cloned.
struct Value {
    v: int
}

impl Value: Order {
    fn compare(*self, other: *Value) -> Ord {
        if self^.v > other^.v {
            return Ord::Greater
        } elsif self^.v < other^.v {
            return Ord::Lesser
        }
        return Ord::Equal
    }
}

impl Value: Clone {
    fn clone(*self) -> Value {
        return Value{v: self^.v}
    }
}

/// Returns true only if the list is sorted in ascending order.
fn is_sorted[T: Order + Clone](list: *List[T]) -> bool {
    for let mut i = 0uint, i < list.len() - 1, i += 1 {
        let ival = list.get(i)
        let jval = list.get(i + 1).clone()
        if ival.compare(&jval) ~~ Ord::Greater {
            return false
        }
    }

    return true
}

/// Sorts the list in ascending order.
fn sort[T: Order + Clone](list: *mut List[T]) {
    for let mut i = 0uint, i < list.len() - 1, {} {
        let cur_value = list.get(i).clone()
        let result = find_min[T](list, i + 1)
        let min_index = result.(0)
        let min_value = result.(1)
        if min_value.compare(&cur_value) ~~ Ord::Lesser {
            list.set(i, min_value)
            list.set(min_index, cur_value)
        } else {
            i += 1
        }
    }
}

/// Finds the minimum value from the `start` index to the end of the list (inclusive).
fn find_min[T: Order + Clone](list: *List[T], start: uint) -> {uint, T} {
    let mut min_value = list.get(start).clone()
    let mut min_index = start

    for let mut i = start + 1, i < list.len(), i += 1 {
        let v = list.get(i).clone()
        if v.compare(&min_value) ~~ Ord::Lesser {
            min_value = v
            min_index = i
        }
    }

    return {min_index, min_value}
}
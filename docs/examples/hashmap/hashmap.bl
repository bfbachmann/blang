use {free}: "std/libc/mem.bl"
use {copy}: "std/mem/mem.bl"
use {Table}: "std/types/table.bl"
use {Eq}: "std/specs/eq.bl"
use {Hasher}: "std/specs/hasher.bl"

pub spec Serialize {
    fn serialize(*self) -> {*u8, uint}
}

/// A mapping from a key to its value.
struct Mapping[K, V] {
    key: K
    value: V
}

impl Mapping {
    fn new(k: K, v: V) -> Mapping[K, V] {
        return Mapping[K, V]{
            key: k
            value: v
        }
    }
}

/// A hashmap that maps keys to their corresponding values.
pub struct HashMap[K: Serialize + Eq, V, H: Hasher] {
    table: Table[Mapping[K, V]]
    num_allocated: uint
    hasher: H
}

impl HashMap {
    /// Creates a new empty map that uses the djb2 hasher.
    pub fn new() -> HashMap[K, V, H] {
        return HashMap[K, V, H].new_with_hasher(H.new())
    }

    /// Creates a new empty map that uses the given hasher.
    pub fn new_with_hasher(hasher: H) -> HashMap[K, V, H] {
        return HashMap[K, V, H]{
            table: Table[Mapping[K, V]].new(0)
            num_allocated: 0
            hasher: hasher
        }
    }

    /// Inserts the given key and value into the map.
    pub fn insert(*mut self, k: K, v: V) {
        if self.needs_grow() {
            self.grow()
        }

        let size = self^.table.size()
        for let mut index = self.hash_key(&k) % size, , index = (index + 1) % size {
            let entry_ptr = self^.table.get(index)

            // If the entry pointer is `null`, it means that the entry is either empty
            // or a tombstone. Either way, we can use it to store the mapping.
            // If the entry already holds this key, we just need to overwrite it.
            if entry_ptr == null or entry_ptr^.key.eq(&k) {
                self^.table.set(index, Mapping[K, V].new(k, v))
                break
            }

            // At this point we know the entry was occupied by another key, so we
            // can just move onto the next entry.
        }

        self^.num_allocated += 1
    }

    /// Returns a pointer to the value that is mapped to the given key, or null
    /// if the key is not in the map.
    pub fn get(*mut self, k: *K) -> *V {
        let size = self^.table.size()
        let hash = self.hash_key(k)
        for let mut count: uint = 0, count < size, count += 1 {
            let index = (hash + count) % size

            // If the entry is empty, it means the key can't be in the map.
            if self^.table.entry_is_empty(index) {
                return null
            }

            let entry_ptr = self^.table.get(index)
            if entry_ptr != null and entry_ptr^.key.eq(k) {
                return &entry_ptr^.value
            }
        }

        return null
    }

    /// Removes the mapping for the given key from the map, if it exists.
    pub fn delete(*mut self, k: *K) {
        let size = self^.table.size()
        let hash = self.hash_key(k)
        for let mut count: uint = 0, count < size, count += 1 {
            let index = (hash + count) % size

            // If the entry is empty, it means the key can't be in the map.
            if self^.table.entry_is_empty(index) {
                return
            }

            let entry_ptr = self^.table.get(index)
            if entry_ptr != null and entry_ptr^.key.eq(k) {
                self^.table.delete(index)
                self^.num_allocated -= 1
                return
            }
        }
    }

    /// Frees the memory that underlies the map.
    pub fn free(self) {
        self.table.free()
    }

    /// Returns the hash of the given key.
    fn hash_key(*mut self, k: *K) -> uint {
        let serialization = k.serialize()
        let key_bytes = serialization.(0)
        let key_len = serialization.(1)
        self^.hasher.reset()
        let hash = self^.hasher.hash(key_bytes, key_len) as uint
        free(key_bytes)
        return hash
    }

    /// If `find_occupied` is `true`, tries to find the index of the entry containing `k`.
    /// If `find_occupied` is `false`, tries to find the index of the entry into which `k`
    /// should be inserted.
    /// This function uses quadratic probing. Returns `{0, false}` if no entry was found.
    fn get_entry_index(*mut self, k: *K, find_occupied: bool) -> {uint, bool} {
        let hash = self.hash_key(k)
        let size = self^.table.size()

        for let mut count: uint = 0, count < size, count += 1 {
            let index = (hash + (count * count + count) / 2) % size

            if find_occupied {
                // If the entry is empty, it means the key can't be in the map.
                if self^.table.entry_is_empty(index) {
                    break
                }

                let entry_ptr = self^.table.get(index)
                if entry_ptr != null and entry_ptr^.key.eq(k) {
                    return {index, true}
                }
            } elsif self^.table.entry_is_empty(index) {
                return {index, true}
            }
        }

        return {0, false}
    }

    /// Returns true if the table needs to grow (i.e. we've reached the resize threshold
    /// computed using a hard-coded load factor of 0.8).
    fn needs_grow(*self) -> bool {
        // Using load factor of 0.8 (4 / 5).
        let resize_threshold = self^.table.size() * 4 / 5
        return self^.num_allocated >= resize_threshold
    }

    /// Increases the size of the table, ensuring that it is always a power of 2 (required for
    /// quadratic probing).
    fn grow(*mut self) {
        // Double the size of the table (or set it to 1 if it's empty).
        let old_size = self^.table.size()
        let mut new_size = old_size * 2
        if new_size == 0 {
            new_size = 2
        }

        // Replace the old table with a new one that is double the size.
        let old_table = self^.table.clone()
        self^.table = Table[Mapping[K, V]].new(new_size)

        // Re-hash all the keys in the table and copy mappings into the new table.
        for let mut i: uint = 0, i < old_size, i += 1 {
            let entry_ptr = old_table.get(i)
            if entry_ptr != null {
                let new_index = self.get_entry_index(&entry_ptr^.key, false)
                copy[Mapping[K, V]](self^.table.get_mut_ptr(i), entry_ptr)
            }
        }

        // Free the old table.
        old_table.free()
    }
}

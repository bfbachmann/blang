mod hashmap

use "std/libc" @libc
use "std/runtime" {assert}

use "std/specs" {Eq}
use "std/allocator" {LibcAllocator}
use "std/types/hasher" {Hash, HashWriter}
use "std/types/slice" {Slice}

struct Key {
    s: str
}

impl Key: Hash {
    fn hash(*self, writer: *mut HashWriter) -> u64 {
        writer.write(Slice[u8].from_str(self.s))
        return writer.sum()
    }
}

impl Key: Eq {
    fn eq(*self, other: *Self) -> bool {
        return self.s == other.s
    }
}

fn main() {
    let mut allocator = LibcAllocator.new().dynamic()
    let mut map = HashMap[Key, str].new(&mut allocator)

    map.insert(Key{s: "key"}, "value")
    let result_ptr = map.get(&Key{s: "key"})
    assert(result_ptr != null, "result can't be null")
    assert(result_ptr^ == "value", "value should be \"value\"")

    map.delete(&Key{s: "key"})
    assert(map.get(&Key{s: "key"}) == null, "result should be null")

    map.insert(Key{s: "a"}, "value: a")
    assert(map.get(&Key{s: "a"})^ == "value: a", "expected \"value: a\"")
    map.insert(Key{s: "b"}, "value: b")
    assert(map.get(&Key{s: "b"})^ == "value: b", "expected \"value: b\"")
    map.insert(Key{s: "c"}, "value: c")
    assert(map.get(&Key{s: "c"})^ == "value: c", "expected \"value: c\"")
    map.insert(Key{s: "d"}, "value: d")
    assert(map.get(&Key{s: "d"})^ == "value: d", "expected \"value: d\"")

    @libc.exit(0)
}

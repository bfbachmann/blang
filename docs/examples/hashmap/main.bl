mod hashmap

use "std/specs" {Eq}
use "std/types/hasher" {Hash, Hasher, BuildHash}
use "std/types/opt" {Opt}
use "std/runtime" {assert, panic}
use "std/allocator" {Allocator, LibcAllocator}
use "std/types/slice" {Slice, SliceMut}
use "std/libc" @libc
use "std/fmt" {printf, Format, Print}

fn main() {
    let mut al = LibcAllocator.new().dynamic()
    let mut map = HashMap[int, int].new(al)

    let mut last_i = 1
    let mut i = 1
    for let mut count = 0; count < 10; count += 1 {
        assert(map.insert(i, i).is_none(), "first insert: expected None")
        assert(map.len() == count as uint + 1, "first insert: wrong length")
        display_hashmap(map)

        assert(map.get(i).unwrap_or(-1) == i, "first get: wrong value")
        assert(map.len() == count as uint + 1, "first get: wrong length")
        display_hashmap(map)

        assert(map.insert(i, i * 2).unwrap_or(-1) == i, "second insert: wrong value")
        assert(map.len() == count as uint + 1, "second insert: wrong length")
        display_hashmap(map)

        assert(map.get(i).unwrap_or(-1) == i * 2, "second get: wrong value")
        assert(map.len() == count as uint + 1, "second get: wrong length")
        display_hashmap(map)

        assert(map.delete(i).unwrap_or(-1) == i * 2, "first delete: wrong value")
        assert(map.len() == count as uint, "first delete: wrong length")
        display_hashmap(map)

        assert(map.delete(i).is_none(), "second delete: expected None")
        assert(map.len() == count as uint, "second delete: wrong length")
        display_hashmap(map)

        assert(map.get(i).is_none(), "third get: expected None")
        assert(map.len() == count as uint, "third get: wrong length")
        display_hashmap(map)

        assert(map.insert(i, i).is_none(), "third insert: expected None")
        assert(map.len() == count as uint + 1, "third insert: wrong length")
        display_hashmap(map)

        let temp = last_i
        last_i = i
        i = i + temp
    }

    map.free()

    @libc.exit(0)
}

fn display_hashmap[K: Hash + Eq + Print, V: Print](map: HashMap[K, V]) {
    printf(Format.new(map.allocator, "_______HashMap______\n"))

    for let mut i = 0uint; i < map.slots.len(); i += 1 {
        match map.slots.ptr_at(i) {
            let Slot[K, V]::Occupied(entry) => {
                printf(
                    Format.new(map.allocator, "% -> %\n")
                        .arg(&entry.key)
                        .arg(&entry.value)
                )
            }
            let Slot[K, V]::Empty => {
                printf(Format.new(map.allocator, "empty\n"))
            }
            let Slot[K, V]::Deleted => {
                printf(Format.new(map.allocator, "deleted\n"))
            }
        }
    }

    printf(Format.new(map.allocator, "____________________\n"))
}

/// Implements the DJB2 hash function.
pub struct DJB2Hasher {
    hash: u64
}

const initial_hash: u64 = 5381

impl DJB2Hasher {
    pub fn new() -> DJB2Hasher {
        return DJB2Hasher{
            hash: initial_hash
        }
    }
}

impl DJB2Hasher: BuildHash {
    pub fn reset(*mut self) {
        self.hash = initial_hash
    }

    pub fn write(*mut self, bytes: Slice[u8]) {
        for let mut i = 0uint; i < bytes.len(); i += 1 {
            let c = bytes.ptr_at(i)^ as u64
            self.hash = ((self.hash bls 5uint) + self.hash) + c
        }
    }

    pub fn sum(self) -> u64 {
        return self.hash
    }
}

pub struct HashMap[K: Hash + Eq, V] {
    allocator: Allocator
    slots: SliceMut[Slot[K, V]]
    len: uint
}

pub enum Slot[K, V] {
    Empty
    Occupied(Entry[K, V])
    Deleted
}

pub struct Entry[K, V] {
    key: K
    value: V
}

impl HashMap {
    pub fn new(al: Allocator) -> Self {
        return Self{
            allocator: al
            slots: SliceMut[Slot[K, V]].new_empty()
            len: 0
        }
    }

    pub fn len(self) -> uint {
        return self.len
    }
 
    pub fn insert(*mut self, key: K, value: V) -> Opt[V] {
        self.grow_if_needed()
        
        let len = self.slots.len()
        let hash = hash_key(key)
        let new_slot = Slot[K, V]::Occupied(Entry[K, V]{
            key: key
            value: value
        })

        for let mut i = 0uint; i < len; i += 1 {
            let index = (hash + i) % len
            let slot = self.slots.get(index).unwrap()

            match slot {
                let Slot[K, V]::Occupied(entry) => {
                    if entry.key.eq(key) {
                        self.slots.set(index, new_slot)
                        return Opt[V]::Some(entry.value)
                    }
                }

                _ => {
                    self.slots.set(index, new_slot)
                    self.len += 1
                    return Opt[V]::None
                }
            }
        }

        panic("failed to locate slot for insertion")
        return Opt[V]::None
    }

    pub fn delete(*mut self, key: K) -> Opt[V] {
        let len = self.slots.len()
        let hash = hash_key(key)

        for let mut i = 0uint; i < len; i += 1 {
            let slot_ptr = self.slots.ptr_at((hash + i) % len)

            match slot_ptr {
                let Slot[K, V]::Occupied(entry_ptr) if entry_ptr.key.eq(key) => {
                    let value = entry_ptr.value
                    slot_ptr^ = Slot[K, V]::Deleted
                    self.len -= 1
                    return Opt[V]::Some(value)
                }

                let Slot[K, V]::Empty => {
                    return Opt[V]::None
                }

                _ => {}
            }
        }

        return Opt[V]::None
    }

    pub fn get(self, key: K) -> Opt[V] {
        let len = self.slots.len()
        let hash = hash_key(key)

        for let mut i = 0uint; i < len; i += 1 {
            let slot_ptr = self.slots.ptr_at((hash + i) % len)

            match slot_ptr {
                let Slot[K, V]::Occupied(entry) if entry.key.eq(key) => {
                    return Opt[V]::Some(entry.value)
                }

                let Slot[K, V]::Empty => {
                    return Opt[V]::None
                }

                _ => {}
            }
        }

        return Opt[V]::None
    }

    pub fn free(*mut self) {
        self.allocator.free(self.slots.ptr() as *mut u8)
        self.len = 0
    }

    fn grow_if_needed(*mut self) {
        // Check if we need to allocate more capacity for the table.
        // Using load factor of 0.8 (4 / 5).
        let old_len = self.slots.len()
        let resize_threshold = old_len * 4 / 5
        if self.len < resize_threshold {
            return
        }

        let new_len: uint = from if old_len == 0 {
            yield 8uint
        } else {
            yield old_len * 2
        }

        let old_slots = self.slots
        self.slots = self.new_empty_slots(new_len)
        self.len = 0

        for let mut i = 0uint; i < old_len; i += 1 {
            match old_slots.ptr_at(i) {
                let Slot[K, V]::Occupied(entry) => {
                    self.insert(entry.key, entry.value)
                }
                _ => {}
            }
        }

        self.allocator.free(old_slots.ptr() as *mut u8)
    }

    fn new_empty_slots(*mut self, len: uint) -> SliceMut[Slot[K, V]] {
        let ptr = self.allocator.alloc(len * sizeof Slot[K, V]) as *mut Slot[K, V]
        let mut slots = SliceMut[Slot[K, V]].new(ptr, len)

        for let mut i = 0uint; i < len; i += 1 {
            slots.ptr_at(i)^ = Slot[K, V]::Empty
        }

        return slots
    }

}

fn hash_key[K: Hash](key: K) -> uint {
    // TODO: Use configurable hasher, or just a better one.
    let mut hasher = Hasher.new(&mut DJB2Hasher.new())
    return key.hash(&mut hasher.writer()) as uint
}

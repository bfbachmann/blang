mod machine_interpreter

use "std/libc" @libc
use "std/allocator" {LibcAllocator}
use "std/runtime" {assert}

fn main() {
    // Use libc for memory management.
    let allocator = LibcAllocator.new().dynamic()

    // Open file for reading.
    let file = @libc.fopen("docs/examples/machine_interpreter/program.txt\0".ptr(), "rb\0".ptr())
    assert(file as uint != 0, "failed to open file")

    // Figure out how many bytes are in the file.
    assert(@libc.fseek(file, 0, @libc.seek_end) == 0, "could not seek end of file")
    let size_bytes = @libc.ftell(file)
    assert(size_bytes != -1, "failed to get file cursor")
    @libc.rewind(file)

    // Allocate space to store the file contents and copy the file.
    // contents into the buffer.
    let prog_data = @libc.calloc(1, size_bytes as uint + 1)
    assert(prog_data as uint != 0, "failed to allocate memory")
    let bytes_read = @libc.fread(prog_data, 1, size_bytes as uint, file)
    assert(bytes_read == size_bytes as uint, "failed to read file into memory")

    // Read instructions from the file.
    let mut parser = Parser.new(allocator, prog_data, bytes_read)
    let instructions = parser.parse_instructions()

    // Execute instructions.
    let mut machine = Machine.new(instructions)
    let result = machine.exec_prog()
    assert(result.status ~~ ExecStatus::Ok, result.msg)

    // For debugging purposes, sum the machine memory and use it as
    // the exit code.
    let mut sum = 0
    for let mut i = 0uint; i < 10; i += 1 {
        sum += machine.memory_at(i)
    }

    machine.free()
    @libc.free(prog_data)
    @libc.fclose(file)
    @libc.exit(sum as uint)
}

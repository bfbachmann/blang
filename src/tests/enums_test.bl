use {exit}: "std/libc/proc.bl"

use {assert}: "src/tests/test_utils.bl"

struct S {
    i: i64
    b: bool
    s: str
}

impl S {
    fn new() -> S {
        return S{i: 0, b: false, s: ""}
    }
}

enum E {
    One
    Two(i64)
    Three(bool)
    Four(S)
}

enum OptionalI64 {
    None
    Some(i64)
}

impl OptionalI64 {
    fn new_some(i: i64) -> OptionalI64 {
        return OptionalI64::Some(i)
    }

    fn new_none() -> OptionalI64 {
        return OptionalI64::None
    }
}

fn main() {
    // Check that enum variant initialization, moves, and comparisons work.
    {
        let e_one = E::One
        assert(e_one ~~ E::One, "1")
        assert(e_one ~~ E::Two(0) == false, "2")

        let e_two = E::Two(-42)
        assert(e_two ~~ E::Two(0), "3")
        assert(e_two !~ E::Three(true), "4")

        let e_three = E::Three(true)
        let e_four = E::Four(S{
            i: 12
            b: false
            s: "test"
        })

        let e_four_moved = e_four;
    }

    // Check that enums work as return values.
    {
        let some = OptionalI64.new_some(10)
        assert(some ~~ OptionalI64::Some(0), "5")

        let none = OptionalI64.new_none()
        assert(none ~~ OptionalI64::None, "6")
    }

    // Check that enums work as arguments.
    {
        take_enum(E::Four(S{
            i: 65,
            b: true,
            s: "does this work?"
        }))
    }

    exit(0)
}

fn take_enum(e: E) {
    assert(e ~~ E::Four(S.new()), "7")
}

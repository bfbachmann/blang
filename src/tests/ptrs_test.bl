use "src/tests/test_utils.bl"

struct T {
    i: i64,
    b: bool,
}

struct HasPtr {
    field: *i64
}

fn main() {
    // Check that rawptrs work.
    {
        let t_ptr = malloc(sizeof T)
        free(t_ptr)
    
        let s_ptr = malloc(sizeof {i64, bool})
        free(s_ptr)
    
        assert(sizeof T == sizeof {bool, i64}, 1)
    }

    // Check that typed pointers work.
    {
        // Check normal reference and dereference operations.
        let val = 91
        let val_ptr = *<val
        assert(*>val_ptr == 91, 2)

        let true_ptr = *<true
        assert(*>true_ptr == true, 3)

        // Check pointers as arguments.
        take(*<223_u64)

        let t = *<T{i: -87, b: false}
        let result = take_t(t)
        assert(result.i == -87, 5)
        assert(result.b == false, 6)

        assert(take_tuple(*<{9}) == 9, 7)

        // Check pointer type coercion.
        let u: *u64 = *<mut 1234u64

        // Check that we can reference and dereference fields
        // that are pointers.
        let t = HasPtr{field: *<123}
    
        assert(*>t.field == 123, 8)
    
        let field_ptr = *<t.field
        assert(*>*>field_ptr == 123, 9)
    }

    // Check that we can cast between pointer types.
    {
        let bool_ptr = malloc(1) as *bool
        assert(bool_ptr as rawptr != NULL, 10)

        let bool_val: bool = *>bool_ptr
        assert(bool_val == *>bool_ptr, 11)

        free(bool_ptr as rawptr)
    }

    // Check that we can chain references and dereferences.
    {
        assert(*>*<!(!(6-1 > 2)), 12)
        assert(*>*<NULL == NULL, 13)
    }

    // Check that we can write to memory using pointers.
    {
        let mut t = T{i: 0, b: false}
        let ptr = *<mut t
        *>ptr = T{i: -23, b: true}
        assert((*>ptr).i == -23, 14)
        assert((*>ptr).b == true, 15)
    }

    // Check that we can cast pointer types.
    {
        let mut v = true
        let v_ptr: *mut bool = *<mut v
        let other_ptr = v_ptr as *mut i64
    }

    // Check that pointers can be compared regardles of mutability.
    {
        let x: *mut i64 = *<mut 1
        let y: *i64 = *<2
        assert(x != y, 16)
    }
    
    exit(0)
}

fn take(ptr: *u64) {
    assert(*>ptr == 223, 4)
}

fn take_t(t: *T) ~ T {
    return T{
        i: (*>t).i
        b: (*>t).b
    }
}

fn take_tuple(tup: *{i64}) ~ i64 {
    return (*>tup).0
}
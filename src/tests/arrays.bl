// This program is for testing the compilation and execution of code
// that makes use of arrays: fixed-size, stack-allocated chunks of 
// memory that contain continguous values of the same type.

extern fn exit(code: u64)

fn assert(b: bool, exit_code: u64) {
    if !b {
        exit(exit_code)
    }
}

fn do_nothing() {}

struct Thing {
    value: i64
}

const SOME_BOOL = true
const SOME_ARRAY_LEN = 100

// Check that arrays can be declared constant at the module level.
const SOME_ARRAY = [SOME_BOOL; SOME_ARRAY_LEN as u64]

fn main() {
    // Check that array variables can be declared, initialized, and accessed.
    {
        // Initialization using constant expressions.
        let a: [u64; 3] = [1, 2, 3]
        assert(a[0] == 1, 1)
        assert(a[1] == 2, 2)
        assert(a[2] == 3, 3)

        let b = ["one", "two", "three"]
        assert(b[0] == "one", 4)
        assert(b[1] == "two", 5)
        assert(b[2] == "three", 6)

        // Make sure empty arrays are allowed.
        let empty: [] = []
        let empty: [u64; 0] = [1; 0]

        // Constant array declaration at the function level.
        const c = [{true}, {false}]
        assert(c[0].0 == true, 7)
        assert(c[1].0 == false, 8)

        // Initialization usinig repeat count.
        let d = [Thing{value: -8}; 2]
        assert(d[0].value == -8, 9)
        assert(d[1].value == -8, 10)

        // Assigning array elements.
        let mut e = [3; 5]
        e[4] = -10
        assert(e[4] == -10, 11)
    }

    // Check that arrays can be passed to and returned from functions.
    {
        let result = take([-8, 12])
        assert(result[0] == "test", 14)
    }

    // Check that array type equality works.
    {
        let x: [fn (); 1] = [do_nothing]
    }

    exit(0)
}

fn take(a: [i64; 2]) ~ [str; 1] {
    assert(a[0] == -8, 12)
    assert(a[1] == 12, 13)
    return ["test"]
}
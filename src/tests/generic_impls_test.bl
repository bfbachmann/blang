use {puts}: "std/libc/io.bl"
use {exit}: "std/libc/proc.bl"
use {heap_realloc, heap_free}: "std/mem/mem.bl"
use {panic}: "std/backtrace/panic.bl"

// List is the data type being tested.
use {List}: "std/types/list.bl"

use {assert}: "src/tests/test_utils.bl"

spec ToInt {
    fn to_int(self): int
}

struct Container[T] {
    t: T
}

impl Container[int]: ToInt {
    fn to_int(self): int {
        return self.t
    }
}

fn main() {
    // Test generic list functionality.
    {
        let mut list = List[int].new()
        for let mut i: uint = 0, i < 10, i += 1 {
            list.push(i as int)
            assert(list.len() == i + 1, "list has wrong len after push()")
        }

        let mut sum = 0
        for let mut i: uint = 0, i < 10, i += 1 {
            sum += list.get(i)
        }
        assert(sum == 45, "expected 45\0")

        while !list.is_empty() {
            puts("popping")
            let t = list.pop()
            assert(list.len() == i, "list has wrong len after remove()")
            assert(t as uint == i, "wrong value retrieved from list")
        }
        assert(list.is_empty(), "list should be empty")

        list.free()
    }

    // Check that we can define and use functions from `impl` blocks declared
    // on concrete monomorphizations of polymorphic types.
    {
        let cont = Container[int]{t: 432}
        assert(cont.to_int() == 432, "expected 432")
    }

    exit(0)
}
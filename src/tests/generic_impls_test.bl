use {puts}: "std/libc/io.bl"
use {exit}: "std/libc/proc.bl"
use {heap_realloc, heap_free}: "std/mem/mem.bl"
use {panic}: "std/backtrace/panic.bl"

// List is the data type being tested.
use {List}: "std/types/list.bl"

use {assert}: "src/tests/test_utils.bl"

fn main() {
    let mut list = List[int].new()
    for let mut i: uint = 0, i < 10, i += 1 {
        list.push(i as int)
        assert(list.len() == i + 1, "list has wrong len after push()")
    }

    let mut sum = 0
    for let mut i: uint = 0, i < 10, i += 1 {
        sum += list.get(i)
    }
    assert(sum == 45, "expected 45\0")

    while !list.is_empty() {
        puts("popping")
        let t = list.pop()
        assert(list.len() == i, "list has wrong len after remove()")
        assert(t as uint == i, "wrong value retrieved from list")
    }
    assert(list.is_empty(), "list should be empty")

    list.free()
    exit(0)
}
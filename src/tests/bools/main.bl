mod bools

use "std/libc" {exit}
use "std/runtime" {assert}

fn main() {
    assert(true, "fail: 1")
    assert(!false, "fail: 2")
    assert(true == true, "fail: 3")
    assert(true != false, "fail: 4")
    assert(false != true, "fail: 5")
    assert(false == false, "fail: 6")
    assert(!false == true, "fail: 7")
    assert(false == !true, "fail: 8")
    assert(1 + 1 == 2, "fail: 9")
    assert(-123_123i64 < 0, "fail: 10")
    assert(-123_123i64 != 123123, "fail: 11")
    assert(123u64 as i64 == 123, "fail: 12")
    assert((true && false) == false, "fail: 13")
    assert((true && true) == true, "fail: 14")
    assert((false && false) == false, "fail: 15")
    assert((true || true) == true, "fail: 16")
    assert((true || false) == true, "fail: 17")
    assert((false || false) == false, "fail: 18")
    assert(2_u32 > 0, "fail: 19")
    assert(1 bls 3uint == 8, "fail: 20")
    assert(4 brs 2u8 == 1, "fail: 21")
    assert(-1234 bxor 432 == -1378, "fail: 22")
    assert(223 band -432 == 80, "fail: 23")
    assert(223 bor -432 == -289, "fail: 24")
    assert(bnot 38 == -39, "fail: 25")

    // Test hex integer literals.
    assert(0xf_u8 == 15_u8, "fail: 25")
    assert(0xf_i8 == 15_i8, "fail: 26")
    assert(0xab_u32 == 171_u32, "fail: 27")
    assert(0xab_i32 == 171_i32, "fail: 28")
    assert(0xabc_u64 == 2748_u64, "fail: 29")
    assert(0xabc_i64 == 2748_i64, "fail: 30")
    assert(0xabc_uint == 2748_uint, "fail: 31")
    assert(0xabc_int == 2748_int, "fail: 32")

    // Test binary integer literals.
    assert(0b101_u8 == 5_u8, "fail: 33")
    assert(0b101_i8 == 5_i8, "fail: 34")
    assert(0b101_u32 == 5_u32, "fail: 35")
    assert(0b101_i32 == 5_i32, "fail: 36")
    assert(0b101_u64 == 5_u64, "fail: 37")
    assert(0b101_i64 == 5_i64, "fail: 38")
    assert(0b101_uint == 5_uint, "fail: 39")
    assert(0b101_int == 5_int, "fail: 40")

    // Make sure that logical operations short-circuit correctly.
    assert(true || fail(), "short-circuit or")
    assert(true || fail() || fail(), "nested short-circuit or")
    assert(!(false && fail()), "short-circuit and")
    assert(!(false && fail() && fail()), "nested short-circuit and")

    exit(0)
}

fn fail() -> bool {
    assert(false, "aborting")
    return false
}

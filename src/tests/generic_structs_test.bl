use "std/libc/proc.bl" {exit}
use "std/libc/mem.bl" {memcpy, malloc, free}

use "std/backtrace/panic.bl" {assert}

struct Ref[T] {
    ptr: *mut T
}

impl Ref {
    fn clone(*self) -> Ref[T] {
        return Ref[T]{
            ptr: self.ptr
        }
    }

    fn get_ptr(*self) -> *T {
        return self.ptr
    }
}

fn heap[T](t: *T) -> Ref[T] {
    let ptr = malloc(sizeof T) as *mut T
    memcpy(ptr as *mut u8, t as *u8, sizeof T)
    return Ref[T]{
       ptr: ptr
    }
}

fn deref[T](ref: *Ref[T]) -> *mut T {
    return ref.ptr
}

// Test monomorphization of parameterized types that refer to themselves.
struct Thing[T] {
    f: fn (Thing[T])
}

fn main() {
    // Test parameterized structs and functions that use them.
    let msg = "test\0"
    let ref = heap[str](&msg)
    let deref_msg = deref[str](&ref)^
    assert(deref_msg == msg, "expected \"test\"")

    // Test methods on parameterized structs.
    let clone = ref
    assert(clone.get_ptr()^ == msg, "expected \"test\"")

    // Check that we can initialize parameterized structs inline.
    let ref = Ref[int]{ptr: &mut 9}
    assert(ref.ptr^ == 9, "expected 9")

    // Just checking that this compiles.
    // TODO: This is super broken.
    // let thing = Thing[int]{
    //     f: fn (thing: Thing[int]) {}
    // }

    exit(0)
}

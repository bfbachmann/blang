use "src/tests/test_utils.bl"

fn cumulative_sum(n: i64): i64 {
    let mut result: i64 = 0
    for let mut i = n, i > 0, i = i - 1 {
        result = result + i
    }

    return result
}

fn fib(n: i64): i64 {
    if n <= 2 { 
        return 1
    }
    return fib(n-1) + fib(n-2)
}

fn run_fn_with_arg(f: fn (i64): i64, arg: i64): i64 {
    return f(arg)
}

fn double(i: i64): i64 {
    return i * 2
}

struct CalcTask {
    f: fn (i64): i64
    arg: i64
}

impl CalcTask {
    fn run(self): i64 {
        return self.f(self.arg)
    }
}

fn get_sum_fn(): fn (int, int): int {
    fn sum(a: int, b: int): int {
        return a + b
    }

    return sum
}

fn main() {
    // Check that regular function calls work.
    {
        assert(cumulative_sum(50) == 1275, 1)
        assert(fib(10) == 55, 2)
    }

    // Check that functions can be passed like any other data and called from
    // variables.
    {
        assert(run_fn_with_arg(double, 2) == 4, 3)

        let task = CalcTask{
            f: double
            arg: -5
        }
        assert(task.run() == -10, 4)
    }

    // Check that nested functions are usable.
    {
        fn mul(val_ptr: *mut int, factor: int) {
            val_ptr? = val_ptr? * factor
        }

        let mut x = 11
        mul(&mut x, 2)
        assert(x == 22, 5)

        let f = get_sum_fn()
        assert(f(3, 4) == 7, 6)
    }

    // Check that anonymous functions work.
    {
        let f = fn (): int {
            fn get_43(): int {
                return 43
            }
            return get_43() - 1
        }
        assert(f() == 42, 7)
    }

    exit(0)
}

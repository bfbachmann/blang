extern fn exit(code: i64)

fn assert(b: bool, code: i64) {
    if !b {
        exit(code)
    }
}

struct Calculator {
    calc_fn: fn (i64, i64) ~ i64
    accumulator: i64
}

impl Calculator {
    fn new(f: CalcFn) ~ Calculator
    with [CalcFn = fn (i64, i64) ~ i64] 
    {
        return Calculator{
            calc_fn: f
            accumulator: 0
        }
    }

    fn update(mut this, value: i64) ~ Calculator {
        let func = this.calc_fn
        this.accumulator = func(this.accumulator, value)
        return this
    }

    fn with_calc_fn(mut this, f: CalcFn) ~ Calculator 
    with [CalcFn = fn (i64, i64) ~ i64] 
    {
        this.calc_fn = f
        return this
    }
}

fn add(a: i64, b: i64) ~ i64 {
    return a + b
}

fn mul(a: i64, b: i64) ~ i64 {
    return a * b
}

fn main() {
    let calc = Calculator.new(add)
    let mut result = calc
        .update(5)
        .update(-12)
        .update(14)
        .with_calc_fn(mul)
        .update(10)
    
    assert(result.accumulator == 70, 1)

    exit(0)
}
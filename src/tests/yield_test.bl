use "std/libc/proc.bl" {exit}

use "std/backtrace/panic.bl" {assert}

fn main() {
    // Check conditional yields.
    let x = from if false {
        yield 1
    } else {
        yield 2
    }
    assert(x == 2, "expected 2\0")

    // Check closure yields.
    let y = from {
        let mut sum = 0
        for let mut i = 0, i < 3, i += 1 {
            sum += i
        }
        yield sum
    }
    assert(y == 3, "expected 3\0")

    // Check loop yields.
    let mut value = 1
    let z = from loop {
        if value % 4 != 0 {
            value += 1
            continue
        }

        yield value
    }
    assert(z == 4, "expected 4\0")

    // Check nested yields.
    let nested = from {
        yield from {
            yield from if true {
                yield 5
            } else {
                yield 6
            }
        }
    }
    assert(nested == 5, "expected 5\0")

    exit(0)
}

extern {
    fn exit(code: u64)
    fn malloc(size: u64) ~ rawptr
    fn free(ptr: rawptr)
}

fn assert(b: bool, code: u64) {
    if !b {
        exit(code)
    }
}

struct T {
    i: i64,
    b: bool,
}

fn main() {
    // Check that rawptrs work.
    {
        let t_ptr = malloc(sizeof T)
        free(t_ptr)
    
        let s_ptr = malloc(sizeof {i64, bool})
        free(s_ptr)
    
        assert(sizeof T == sizeof {bool, i64}, 1)
    }

    // Check that typed pointers work.
    {
        let val = 91
        let val_ptr = *<val
        assert(*>val_ptr == 91, 2)

        let true_ptr = *<true
        assert(*>true_ptr == true, 3)

        take(*<223_u64)
    }
    
    exit(0)
}

fn take(ptr: *u64) {
    assert(*>ptr == 223, 4)
}
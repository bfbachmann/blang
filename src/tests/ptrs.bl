extern {
    fn exit(code: u64)
    fn malloc(size: u64) ~ rawptr
    fn free(ptr: rawptr)
}

fn assert(b: bool, code: u64) {
    if !b {
        exit(code)
    }
}

struct T {
    i: i64,
    b: bool,
}

fn main() {
    // Check that rawptrs work.
    {
        let t_ptr = malloc(sizeof T)
        free(t_ptr)
    
        let s_ptr = malloc(sizeof {i64, bool})
        free(s_ptr)
    
        assert(sizeof T == sizeof {bool, i64}, 1)
    }

    // Check that typed pointers work.
    {
        // Check normal reference and dereference operations.
        let val = 91
        let val_ptr = *<val
        assert(*>val_ptr == 91, 2)

        let true_ptr = *<true
        assert(*>true_ptr == true, 3)

        // Check pointers as arguments.
        take(*<223_u64)

        let t = *<T{i: -87, b: false}
        let result = take_t(t)
        assert(result.i == -87, 5)
        assert(result.b == false, 6)

        assert(take_tuple(*<{9}) == 9, 7)

        // Check pointer type coercion.
        let u: *u64 = *<1234
    }

    // Check that we can cast between pointer types.
    {
        let bool_ptr = malloc(1) as *bool
        assert(bool_ptr as rawptr != NULL, 8)

        let bool_val: bool = *>bool_ptr
        assert(bool_val == *>bool_ptr, 9)

        free(bool_ptr as rawptr)
    }
    
    exit(0)
}

fn take(ptr: *u64) {
    assert(*>ptr == 223, 4)
}

fn take_t(t: *T) ~ T {
    return *>t
}

fn take_tuple(tup: *{i64}) ~ i64 {
    let tup = *>tup
    return tup.0
}
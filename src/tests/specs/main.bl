mod specs

use "std/libc" {exit}
use "std/runtime" {assert}
use "std/types/slice" {Slice}
use "std/types/result" {Result}
use "src/tests/specs/utils" {Test}

struct Thing {}

// Make sure we can implement the imported spec.
impl Thing: Test {
    fn test() -> int {
        return 784
    }
}

fn call_test[T: Test]() -> int {
    return T.test()
}

spec Get1 { 
    fn get_value() -> int 
}

spec Get2 { 
    fn get_value() -> int
}

// Check that we can declare impls for overlapping specs on the same type.
struct Getter {}

impl Getter: Get1 {
    fn get_value() -> int {
        return 1
    }
}

impl Getter: Get2 {
    fn get_value() -> int {
        return 2
    }
}

fn get_value_1[T: Get1]() -> int {
    return T.get_value()
}

fn get_value_2[T: Get2]() -> int {
    return T.get_value()
}

pub spec Parse {
    fn parse(bytes: Slice[u8]) -> {uint, Result[Self, str]}
}

impl uint: Parse {
    fn parse(bytes: Slice[u8]) -> {uint, Result[uint, str]} {
        let mut value = 0uint

        for let mut i = 0uint; i < bytes.len(); i += 1 {
            let byte = bytes.get(i).unwrap()
            if byte < '0' as u8 || byte > '9' as u8 {
                break
            }

            // TODO: Check for overflow.
            value = value * 10 + byte as uint - '0' as uint
        }

        return {i, Result[uint, str]::Ok(value)}
    }
}

// Check that we can implement local specs on foreign types.
impl str: Get1 {
    fn get_value() -> int {
        return 1
    }
}

fn main() {
    assert(call_test[Thing]() == 784, "expected 784")
    assert(get_value_1[Getter]() == 1, "expected 1")
    assert(get_value_2[Getter]() == 2, "expected 2")
    assert(get_value_1[str]() == 1, "expected 1")

    let result = uint.parse(Slice[u8].from_str("432"))
    let offset = result.(0)
    let value = result.(1).ok().unwrap()
    assert(offset == 3, "expected 3")
    assert(value == 432, "expected 432")
    
    exit(0)
}

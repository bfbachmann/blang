mod specs

use "std/libc" {exit}
use "std/runtime" {assert}
use "src/tests/specs/utils" {Test}

struct Thing {}

// Make sure we can implement the imported spec.
impl Thing: Test {
    fn test() -> int {
        return 784
    }
}

fn call_test[T: Test]() -> int {
    return T.test()
}

spec Get1 { 
    fn get_value() -> int 
}

spec Get2 { 
    fn get_value() -> int
}

// Check that we can declare impls for overlapping specs on the same type.
struct Getter {}

impl Getter: Get1 {
    fn get_value() -> int {
        return 1
    }
}

impl Getter: Get2 {
    fn get_value() -> int {
        return 2
    }
}

fn get_value_1[T: Get1]() -> int {
    return T.get_value()
}

fn get_value_2[T: Get2]() -> int {
    return T.get_value()
}

// Check that we can implement local specs on foreign types.
impl str: Get1 {
    fn get_value() -> int {
        return 1
    }
}

fn main() {
    assert(call_test[Thing]() == 784, "expected 784")
    assert(get_value_1[Getter]() == 1, "expected 1")
    assert(get_value_2[Getter]() == 2, "expected 2")
    assert(get_value_1[str]() == 1, "expected 1")
    exit(0)
}

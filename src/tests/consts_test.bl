use {exit}: "std/libc/proc.bl"

use {assert}: "std/backtrace/panic.bl"
use io: "std/libc/io.bl"

struct Thing {
    i: i64
    b: bool
}

const seek_end = 123
const some_int = -50
const some_struct = Thing {
    i: 987
    b: false
}
const some_struct_I = some_struct.i
const some_tuple = {345, true}
const ptr = null
const other_int = some_int + 1
const enum_err = Result::Err("failed")
const some_str = "Hello world! 你好世界\n"
const same_strs = some_str == "Hello world! 你好世界\n"
const heart_char = '\u2764'

enum Result {
    Ok
    Err(str)
}

fn main() {
    assert(some_int == -50, "expected -50")
    assert(some_struct.i == 987, "expected 987")
    assert(some_struct.b == false, "expected false")
    assert(some_tuple.(0) == 345, "expected 345")
    assert(some_tuple.(1) == true, "expected true")
    assert(ptr == null, "expected null")
    assert(other_int == some_int + 1, "expected some_int + 1")
    assert(enum_err ~~ Result::Err("failed"), "expected Err")
    assert(same_strs, "expected same")
    assert(some_str != "not the same", "expected 'not the same'")
    assert(some_struct_I == 987, "expected 987")
    assert(heart_char == '\u2764', "expected '\u2764'")

    // Make sure constant declaration is allows inside functions.
    const thing: str = "test"
    assert(thing == "test", "expected 'test'")

    // Make sure there are no const name collisions across modules.
    assert(seek_end == 123, "expected 123")
    assert(@io.seek_end == 2, "expected 2")

    exit(0)
}

use "std/libc/proc.bl" {exit}

use "std/backtrace/panic.bl" {assert}

fn main() {
    // Check that we can initialize float variables with literals and compare them.
    {
        let v1 = 1.23
        assert(v1 == 1.23, "expected 1.23")
    
        // Check that float comparison works.
        assert(v1 > -2.0, "expected >")
        assert(v1 >= v1, "expected >=")
        assert(v1 < 3.0e2, "expected <")
        assert(-33.0e-2 <= 3.8, "expected <=")
        assert(0.00000032 != 0.0000032, "expected !=")
    }

    // Check that float types can be used in other composite types.
    {
        struct Test {
            f: f32
        }

        let t = Test{f: 123.43f32}
        assert(t.f == 123.43f32, "expected 123.43f32")
    }

    // Check that float types can be used as function args and return types.
    // Also check that float arithmetic works
    {
        fn calc(a: f64, b: f64, c: f64, d: f64) -> f64 {
            return a * b - c / d
        }

        assert(calc(2.0e4, -4.3, 32.3, -3.483e-6) == 9_187_614.6999712891, "expected 9_187_614.6999712891")
        assert(-3.7 % 2.9 == -0.8000000000000003, "expected -0.8000000000000003")
    }

    // Check that type coercion between float types works.
    {
        let v: f32 = 0.8 * 7.3
        assert(v == 5.84, "expected 5.84")
    }

    exit(0)
}

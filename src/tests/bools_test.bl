use {exit}: "std/libc/proc.bl"

use {assert}: "src/tests/test_utils.bl"

fn main() {
    assert(true, "fail: 1")
    assert(!false, "fail: 2")
    assert(true == true, "fail: 3")
    assert(true != false, "fail: 4")
    assert(false != true, "fail: 5")
    assert(false == false, "fail: 6")
    assert(!false == true, "fail: 7")
    assert(false == !true, "fail: 8")
    assert(1 + 1 == 2, "fail: 9")
    assert(-123_123i64 < 0, "fail: 10")
    assert(-123_123i64 != 123123, "fail: 11")
    assert(123u64 as i64 == 123, "fail: 12")
    assert((true and false) == false, "fail: 13")
    assert((true and true) == true, "fail: 14")
    assert((false and false) == false, "fail: 15")
    assert((true or true) == true, "fail: 16")
    assert((true or false) == true, "fail: 17")
    assert((false or false) == false, "fail: 18")
    assert(2_u32 > 0, "fail: 19")
    assert(1 bls 3uint == 8, "fail: 20")
    assert(4 brs 2u8 == 1, "fail: 21")
    assert(-1234 bxor 432 == -1378, "fail: 22")
    assert(223 band -432 == 80, "fail: 23")
    assert(223 bor -432 == -289, "fail: 24")
    assert(bnot 38 == -39, "fail: 25")

    // Make sure that logical operations short-circuit correctly.
    assert(true or fail(), "short-circuit or")
    assert(true or fail() or fail(), "nested short-circuit or")
    assert(!(false and fail()), "short-circuit and")
    assert(!(false and fail() and fail()), "nested short-circuit and")

    exit(0)
}

fn fail(): bool {
    assert(false, "aborting")
    return false
}

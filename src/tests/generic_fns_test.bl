use "std/libc/proc.bl" {exit}
use "std/libc/mem.bl" {malloc, free}

use "std/backtrace/panic.bl" {assert}

spec ToStr {
    fn to_str(*self) -> str
}

spec Default {
    fn default() -> Self
}

// Test functions with params that have multiple spec constraints.
fn get_default_str[T: Default + ToStr]() -> str {
    return get_str[T](T.default())
}

fn get_str[T: ToStr](t: T) -> str {
    return t.to_str()
}

struct Thing {
    s: str
}

impl Thing: Default {
    fn default() -> Thing {
        return Thing{s: "default\0"}
    }
}

impl Thing: ToStr {
    fn to_str(*self) -> str {
        return self^.s
    }
}

// Test functions with params that have no constraints.
fn heap[T](t: T) -> *mut T {
    let ptr = heap_alloc[T]()
    ptr^ = t
    return ptr
}

fn heap_alloc[T]() -> *mut T {
    return malloc(sizeof T) as *mut T
}

fn heap_free[T](t: *mut T) {
    free(t as *mut u8)
}

fn double(s: int) -> int {
    return s * 2
}

// Test functions that have function arguments that contain the function params.
fn apply[T](f: fn (T) -> T, t: T) -> T {
    return f(t)
}

// Test functions that have tuple arguments that contain the function params.
fn get_second[T](tup: {T, T}) -> T {
    return tup.(1)
}

// Test functions that have pointer arguments that contain the function params.
fn deref[T](ptr: *int) -> int {
    return ptr^
}

// Test functions that have array arguments that contain the function params.
fn nth[T](array: [int; 4], n: uint) -> int {
    return array.(n)
}

fn main() {
    assert(get_default_str[Thing]() == "default\0", "expected \"default\"\0")

    let thing_ptr = heap[Thing](Thing{s: "bing bong!\0"})
    assert(thing_ptr^.s == "bing bong!\0", "expected \"bing bong!\"\0")
    heap_free[Thing](thing_ptr)

   assert(apply[int](double, -7) == -14, "expected -14\0")
   assert(get_second[int]({2, 9}) == 9, "expected 9\0")
   assert(deref[int](&17) == 17, "expected 17\0")
   assert(nth[int]([1, 2, 3, 4], 2) == 3, "expected 3\0")

    exit(0)
}

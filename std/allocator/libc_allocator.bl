mod allocator

use "std/libc" @libc
use "std/runtime" {assert}

/// Just wraps libc's memory management API.
pub struct LibcAllocator {}

impl LibcAllocator {
    /// Returns a new `LibcAllocator`.
    pub fn new() -> LibcAllocator {
        return LibcAllocator{}
    }

    /// Creates a new `Allocator` that dispatches to this allocator.
    pub fn dynamic(*mut self) -> Allocator {
        return Allocator.new(self)
    }
}

impl LibcAllocator: Allocate {
    pub fn alloc(*mut _, size: uint) -> *mut u8 {
        let ptr = @libc.malloc(size)

        // TODO: Return error on allocation failure.
        assert(ptr != null, "memory allocation failed: malloc returned null")

        return ptr
    }

    pub fn realloc(*mut _, ptr: *mut u8, size: uint) -> *mut u8 {
        let p = @libc.realloc(ptr, size)

        // TODO: Return error on allocation failure.
        assert(p != null, "memory allocation failed: realloc returned null")
        
        return p
    }

    pub fn free(*mut _, ptr: *mut u8) {
        @libc.free(ptr)
    }
}
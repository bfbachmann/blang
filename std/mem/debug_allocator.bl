use io: "std/libc/io.bl"
use mem: "std/libc/mem.bl"
use panic: "std/backtrace/panic.bl"
use {List}: "std/types/list.bl"
use {Allocator}: "std/mem/allocator.bl"

/// A block of heap-allocated memory.
struct Block {
    ptr: *mut u8
    size: uint
}

impl Block {
    fn end_ptr(*self) -> *u8 {
        return self^.ptr.(self^.size as int)
    }

    fn contains(*self, ptr: *u8) -> bool {
        return ptr >= self^.ptr and ptr < self.end_ptr()
    }

    fn contains_range(*self, ptr: *u8, size: uint) -> bool {
        return self^.size >= size and self.contains(ptr)
    }
}

/// Allcates memory on the heap and checks for invalid pointers and memory
/// leaks.
pub struct DebugAllocator {
    blocks: List[Block]
}

impl DebugAllocator: Allocator {
    /// Returns a new allocator.
    pub fn new() -> DebugAllocator {
        return DebugAllocator{
            blocks: List[Block].new()
        }
    }

    /// Allocates `size` bytes on the heap an returns the pointer.
    pub fn alloc(*mut self, size: uint) -> *mut u8 {
        let ptr = @mem.malloc(size)
        @panic.assert(ptr != null, "failed to allocate memory\0")
        self^.blocks.push(Block{
            ptr: ptr
            size: size
        })
        return ptr
    }

    /// Resized memory allocated for `ptr` to `size` bytes and returns the
    /// pointer to the newly-allocated memory. This will copy data from the
    /// old memory region into the new one.
    pub fn realloc(*mut self, ptr: *u8, size: uint) -> *mut u8 {
        let result = self.block_index(ptr)
        let found = result.(1)
        @panic.assert(found, "cannot realloc dangling pointer")

        let index = result.(0)
        let block = self^.blocks.get_mut(index)
        @panic.assert(block^.ptr == ptr, "cannot relloc using non-base pointer")

        block^.ptr = @mem.realloc(block^.ptr, size)
        @panic.assert(block^.ptr != null, "failed to reallocate memory")
        block^.size = size

        return block^.ptr
    }

    /// Frees memory pointed to by `ptr`.
    pub fn free(*mut self, ptr: *u8) {
        let result = self.block_index(ptr)
        let found = result.(1)
        @panic.assert(found, "cannot free dangling pointer")

        let index = result.(0)
        let block = self^.blocks.get(index)
        @panic.assert(block^.ptr == ptr, "cannot free using non-base pointer")
        
        @mem.free(block^.ptr)
        self^.blocks.remove(index)
    }

    /// Return true if `ptr` is valid and references a memory region capable of
    /// holding at least `size` bytes.
    pub fn is_valid(*self, ptr: *u8, size: uint) -> bool {
        let result = self.block_index(ptr)
        let found = result.(1)
        if !found {
            return false
        }

        let index = result.(0)
        return self^.blocks.get(index).contains_range(ptr, size)
    }

    fn block_index(*self, ptr: *u8) -> {uint, bool} {
        // TODO: This is really slow. Think of a faster way to search.
        for let mut i = 0uint, i < self^.blocks.len(), i += 1 {
            let block = self^.blocks.get(i)
            if block.contains(ptr) {
                return {i, true}
            }
        }

        return {0, false}
    }

    /// Prints information about allocated memory blocks.
    pub fn print_summary(*self) {
        let len = self^.blocks.len()
        for let mut i = 0uint, i < len, i += 1 {
            // TODO: Print detailed info about block.
            @io.puts("block\0")
        }
    }
}
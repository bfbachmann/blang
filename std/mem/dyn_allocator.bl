use io: "std/libc/io.bl"
use {Allocator}: "std/mem/allocator.bl"

/// An allocator with dynamic dispatch.
pub struct DynAllocator {
    /// A pointer to the underlying allocator.
    pub allocator: *mut DynAllocator

    // Function pointers for dynamic dispatch (i.e. a virtual table of sorts).
    pub alloc_fn: fn (*mut DynAllocator, uint) -> *mut u8
    pub realloc_fn: fn (*mut DynAllocator, *u8, uint) -> *mut u8
    pub free_fn: fn (*mut DynAllocator, *u8)
}

impl DynAllocator: Allocator {
    /// Calls alloc on the underlying allocator and returns the result.
    pub fn alloc(*mut self, size: uint) -> *mut u8 {
        return self^.alloc_fn(self^.allocator, size)
    }
    
    /// Calls realloc on the underlying allocator and returns the result.
    pub fn realloc(*mut self, ptr: *u8, size: uint) -> *mut u8 {
        return self^.realloc_fn(self^.allocator, ptr, size)
    }

    /// Calls free on the underlying allocator and returns the result.
    pub fn free(*mut self, ptr: *u8) {
        self^.free_fn(self^.allocator, ptr)
    }
}

/// Returns an allocator with dynamic dispatch to `al`'s methods.
// TODO: Make this the `new` method on the `DynAllocator` type when we support
// parameterized methods.
pub fn new_dyn_allocator[Al: Allocator](al: *mut Al) -> DynAllocator {
    return DynAllocator{
        allocator: al as *mut DynAllocator
        alloc_fn: dispatch_alloc[Al]
        realloc_fn: dispatch_realloc[Al]
        free_fn: dispatch_free[Al]
    }
}

fn dispatch_alloc[Al: Allocator](dyn_al: *mut DynAllocator, size: uint) -> *mut u8 {
    return Al.alloc(dyn_al as *mut Al, size)
}

fn dispatch_realloc[Al: Allocator](dyn_al: *mut DynAllocator, ptr: *u8, size: uint) -> *mut u8 {
    return Al.realloc(dyn_al as *mut Al, ptr, size)
}

fn dispatch_free[Al: Allocator](dyn_al: *mut DynAllocator, ptr: *u8) {
    Al.free(dyn_al as *mut Al, ptr)
}
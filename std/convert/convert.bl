mod convert

use "std/types/slice" {Slice}

/// Converts an int to a sequence of bytes (basically a string) and an offset.
/// The byte array contains the characters of the string representation of `val`
/// and the offset marks the position in the array at which the string starts
/// (because not all ints will require all 65 bytes).
pub fn int_to_str(val: int) -> {[u8; 65], uint} {
    return format_uint(val as uint, val < 0)
}

pub fn uint_to_str(val: uint) -> {[u8; 65], uint} {
    return format_uint(val, false)
}

fn format_uint(mut u: uint, neg: bool) -> {[u8; 65], uint} {
    const digits = "0001020304050607080910111213141516171819\
        2021222324252627282930313233343536373839\
        4041424344454647484950515253545556575859\
        6061626364656667686970717273747576777879\
        8081828384858687888990919293949596979899"

    let digit_bytes = Slice[u8].from_str(digits)
    let mut str_bytes = [0u8; 65]
    let mut i = 65uint

    while u >= 100 {
        let is = u % 100 * 2
        u /= 100
        i -= 2
        str_bytes.(i+1) = digit_bytes.get(is+1).unwrap()
        str_bytes.(i) = digit_bytes.get(is).unwrap()
    }

    let is = u * 2
    i -= 1
    str_bytes.(i) = digit_bytes.get(is+1).unwrap()

    if u >= 10 {
        i -= 1
        str_bytes.(i) = digit_bytes.get(is).unwrap()
    }

    if neg {
        i -= 1
        str_bytes.(i) = '-' as u8
    }

    return {str_bytes, i}
}

/// Converts `b` into a `str`.
pub fn bool_to_str(b: bool) -> str {
    if b {
        return "true"
    }
    return "false"
}
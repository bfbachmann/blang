use "std/libc/mem.bl"

/// Strings are heap-allocated sequences of bytes.
struct String {
    ptr: *u8
    len: uint
}

impl String {
    /// Creates a new `String` from the given `str`.
    fn from_str(s: str): String {
        let ptr = malloc(s.len())
        memcpy(ptr, s as *u8, s.len())
        return String{
            ptr: ptr
            len: s.len()
        }
    }

    /// Creates a new `String` from the concatenation of `first` and `second`.
    fn concat(first: *String, second: *String): String {
        let new_len = first^.len + second^.len
        let ptr = malloc(new_len)

        memcpy(ptr, first^.ptr, first^.len)
        memcpy(ptr.(first^.len), second^.ptr, second^.len)

        return String{
            ptr: ptr
            len: new_len
        }
    }

    /// Frees heap space allocated for this `String`.
    fn free(self) {
        free(self.ptr)
    }
}

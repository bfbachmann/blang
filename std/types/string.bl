mod string

use "std/libc" @libc

/// Strings are heap-allocated sequences of bytes.
pub struct String {
    bytes: Slice[u8]
}

impl String {
    /// Creates a new `String` from the given `str`.
    pub fn from_str(s: str) -> String {
        let ptr = @libc.malloc(s.len())
        @libc.memcpy(ptr, s.ptr(), s.len())
        return String{
            bytes: Slice[u8].new(ptr, s.len())
        }
    }

    /// Creates a new `String` from the concatenation of `first` and `second`.
    pub fn concat(first: Slice[u8], second: Slice[u8]) -> String {
        let new_len = first.len() + second.len()
        let ptr = @libc.malloc(new_len)

        @libc.memcpy(ptr, first.ptr(), first.len())
        @libc.memcpy(ptr.(first.len() as int), second.ptr(), second.len())

        return String{
            bytes: Slice[u8].new(ptr, new_len)
        }
    }

    /// Returns a pointer to the bytes in the string.
    pub fn ptr(self) -> *u8 {
        return self.bytes.ptr()
    }

    /// Returns the length of the string in bytes.
    pub fn len(self) -> uint {
        return self.bytes.len()
    }

    /// Frees heap space allocated for this `String`.
    pub fn free(self) {
        @libc.free(self.ptr())
    }
}

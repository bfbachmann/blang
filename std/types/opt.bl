mod opt

use "std/runtime" {panic}

/// An optional value that is either `Some(T)` or `None`.
pub enum Opt[T] {
    Some(T)
    None
}

impl Opt {
    /// Returns true if the value is `None`.
    pub fn is_none(self) -> bool {
        return self ~~ Opt[T]::None
    }

    /// Returns true if the value is `Some(T)`.
    pub fn is_some(self) -> bool {
        return self !~ Opt[T]::None
    }

    /// Returns the contained value, if any. Otherwise, returns `default`.
    pub fn unwrap_or(self, default: T) -> T {
        match self {
        case let Opt[T]::Some(t):
            return t
        case:
            return default
        }
    }
}
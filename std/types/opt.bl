mod opt

use "std/runtime" {panic}
use "std/mem" @mem

/// An optional value that is either `Some(T)` or `None`.
pub enum Opt[T] {
    Some(T)
    None
}

impl Opt {
    /// Returns true if the value is `None`.
    pub fn is_none(self) -> bool {
        return self ~~ Opt[T]::None
    }

    /// Returns true if the value is `Some(T)`.
    pub fn is_some(self) -> bool {
        return self !~ Opt[T]::None
    }

    /// Returns the contained value, if any. Otherwise, returns `default`.
    pub fn unwrap_or(self, default: T) -> T {
        match self {
            let Opt[T]::Some(t) => return t
            _ => return default
        }
    }

    /// Returns the contained value, or panics if there is none.
    pub fn unwrap(self) -> T {
        match self {
            let Opt[T]::Some(t) => return t
            _ => {
                panic("cannot unwrap optional None")

                // TODO: Remove this when we can mark `panic` as `noreturn`.
                return @mem.heap_alloc[T](1)^
            }
        }
    }

    /// If this optional contains a value, transforms the value using `f` and
    /// returns an optional wrapping the result. Otherwise, returns None.
    pub fn map[O](self, f: fn (T) -> O) -> Opt[O] {
        match self {
            let Opt[T]::Some(t) => return Opt[O]::Some(f(t))
            _ => return Opt[O]::None
        }
    }
}
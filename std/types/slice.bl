mod slice

use "std/runtime" {assert}
use "std/types/opt" {Opt}

/// A bounded pointer to contiguous values of type T.
pub struct Slice[T] {
    ptr: *T
    len: uint
}

impl Slice {
    /// Returns a new slice from `ptr` of `len` elements of type `T`.
    pub fn new(ptr: *T, len: uint) -> Slice[T] {
        return Slice[T]{
            ptr: ptr
            len: len
        }
    }

    /// Returns a new empty slice.
    pub fn new_empty() -> Slice[T] {
        return Slice[T]{
            ptr: null
            len: 0
        }
    }

    /// Returns the number of elements in the slice.
    pub fn len(self) -> uint {
        return self.len
    }

    /// Returns a pointer to the base of the slice.
    pub fn ptr(self) -> *T {
        return self.ptr
    }

    /// Returns a pointer to the element at index `i` in the slice.
    pub fn ptr_at(self, i: uint) -> *T {
        assert(i < self.len, "slice index out of bounds")
        return self.ptr.(i as int)
    }

    /// Returns the value at index `i` in the slice.
    pub fn get(self, i: uint) -> Opt[T] {
        if i >= self.len {
            return Opt[T]::None
        }
        return Opt[T]::Some(self.ptr_at(i)^)
    }

    /// Returns a slice that points to elements from index `start` (incluive) 
    /// to `end` (exclusive).
    pub fn slice(self, start: uint, end: uint) -> Slice[T] {
        assert(start < self.len || start == 0, "slice start out of bounds")
        assert(end <= self.len, "slice end out of bounds")
        assert(end >= start, "slice end cannot be less than start")

        return Slice[T]{
            ptr: self.ptr.(start as int)
            len: end - start
        }
    }

    /// Returns a slice that points to elements from the base of the slice
    /// to `end` (exclusive).
    pub fn slice_left(self, end: uint) -> Slice[T] {
        return self.slice(0, end)
    }

    /// Returns a slice that points to elements from `start` (inclusive) to
    /// `end` (exclusive).
    pub fn slice_right(self, start: uint) -> Slice[T] {
        return self.slice(start, self.len)
    }
}

impl Slice[u8] {
    /// Creates a slice from the given str.
    pub fn from_str(s: str) -> Slice[u8] {
        return Slice[u8].new(s.ptr(), s.len())
    }
}

/// A bounded pointer to contiguous mutable values of type T.
// TODO: Deduplicate Slice and SliceMut implementations when we have support
// type aliasing (e.g. `type Slice[T] = SliceMut[T]`).
pub struct SliceMut[T] {
    ptr: *mut T
    len: uint
}

impl SliceMut {
    /// Returns a new slice from `ptr` of `len` elements of type `T`.
    pub fn new(ptr: *mut T, len: uint) -> SliceMut[T] {
        return SliceMut[T]{
            ptr: ptr
            len: len
        }
    }

    /// Returns a new empty slice.
    pub fn new_empty() -> SliceMut[T] {
        return SliceMut[T]{
            ptr: null
            len: 0
        }
    }

    /// Converts this SliceMut to a Slice.
    pub fn to_slice(self) -> Slice[T] {
        return Slice[T]{
            ptr: self.ptr
            len: self.len
        }
    }

    /// Returns the number of elements in the slice.
    pub fn len(self) -> uint {
        return self.len
    }

    /// Returns a pointer to the base of the slice.
    pub fn ptr(self) -> *mut T {
        return self.ptr
    }

    /// Returns a pointer to the element at index `i` in the slice.
    pub fn ptr_at(self, i: uint) -> *mut T {
        assert(i < self.len, "slice index out of bounds")
        return self.ptr.(i as int)
    }

    /// Returns the value at index `i` in the slice, or None if `i` is ouf of
    /// bounds.
    pub fn get(self, i: uint) -> Opt[T] {
        if i >= self.len {
            return Opt[T]::None
        }
        return Opt[T]::Some(self.ptr_at(i)^)
    }

    /// Sets the element at index `i` to `t`. Panics if `i` is out of bounds.
    pub fn set(self, i: uint, t: T) {
        self.ptr_at(i)^ = t
    }

    /// Returns a slice with the same pointer and length as this one.
    pub fn as_slice(self) -> Slice[T] {
        return Slice[T]{
            ptr: self.ptr
            len: self.len
        }
    }

    /// Returns a slice that points to elements from index `start` (incluive) 
    /// to `end` (exclusive).
    pub fn slice(self, start: uint, end: uint) -> SliceMut[T] {
        assert(end > start, "slice end must be greater than start")
        assert(start < self.len, "slice start out of bounds")
        assert(end <= self.len, "slice end out of bounds")
        return SliceMut[T]{
            ptr: self.ptr.(start as int)
            len: end - start
        }
    }

    /// Returns a slice that points to elements from the base of the slice
    /// to `end` (exclusive).
    pub fn slice_left(self, end: uint) -> SliceMut[T] {
        return self.slice(0, end)
    }

    /// Returns a slice that points to elements from `start` (inclusive) to
    /// `end` (exclusive).
    pub fn slice_right(self, start: uint) -> SliceMut[T] {
        return self.slice(start, self.len)
    }
}

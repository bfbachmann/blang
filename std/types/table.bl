use {heap_alloc, heap_realloc, heap_free}: "std/mem/mem.bl"
use {panic}: "std/backtrace/panic.bl"

const deleted: u8 = 2
const occupied: u8 = 1
const empty: u8 = 0

pub struct Table[T] {
    /// Points to the beginning of the region in which table entries are stored.
    entries: *mut T
    /// The number of table entries.
    size: uint
    /// Points to the beginning of the region that holds a `u8` for each table entry.
    /// The `u8` for a given entry will be 0 if it is empty, 1 if it is occupied, and
    /// 2 if it was deleted (i.e. was occupied and then got deleted).
    entry_status: *mut u8
}

impl Table {
    /// Creates a new table with `size` entries.
    pub fn new(size: uint): Table[T] {
        if size == 0 {
            return Table[T]{
                entries: null
                size: 0
                entry_status: null
            }
        }

        let table = Table[T]{
            entries: heap_alloc[T](size)
            size: size
            entry_status: heap_alloc[u8](size)
        }

        return table
    }

    /// Returns the current number of entries in the table.
    pub fn size(*self): uint {
        return self^.size
    }

    /// Writes `t` into the entry at index `i`.
    pub fn set(*mut self, i: uint, t: T) {
        self.check_bounds(i)
        self^.entries.(i as int)^ = t
        self^.entry_status.(i as int)^ = occupied
    }

    /// Returns a pointer to the value at index `i` in the table. Returns `null` if the entry
    /// at `i` is empty.
    pub fn get(*self, i: uint): *T {
        self.check_bounds(i)
        if self^.entry_status.(i as int)^ != occupied {
            return null
        }

        return self^.entries.(i as int)
    }

    /// Returns a `*mut` to the entry at index `i`, even if it is not occupied.
    pub fn get_mut_ptr(*mut self, i: uint): *mut T {
        self.check_bounds(i)
        return self^.entries.(i as int)
    }

    /// Deletes the entry at index `i`. This marks the entry as deleted if it was previously
    /// occupied. Otherwise, does nothing.
    pub fn delete(*mut self, i: uint) {
        self.check_bounds(i)
        if self^.entry_status.(i as int)^ == occupied {
            self^.entry_status.(i as int)^ = deleted
        }
    }

    /// Returns `true` if the entry at index `i` is occupied.
    pub fn entry_is_occupied(*self, i: uint): bool {
        self.check_bounds(i)
        return self^.entry_status.(i as int)^ == occupied
    }

    /// Returns `true` if the entry at index `i` was deleted.
    pub fn entry_is_deleted(*self, i: uint): bool {
        self.check_bounds(i)
        return self^.entry_status.(i as int)^ == deleted
    }

    /// Returns `true` if the entry at index `i` is empty.
    pub fn entry_is_empty(*self, i: uint): bool {
        return self^.entry_status.(i as int)^ == empty
    }

    /// Resizes the table to the given size.
    pub fn resize(*mut self, size: uint) {
        self^.entries = heap_realloc[T](self^.entries, size)
        self^.entry_status = heap_realloc[u8](self^.entry_status, size)
        self^.size = size
    }

    /// Frees memory that underlies the table.
    pub fn free(self) {
        heap_free[T](self.entries)
        heap_free[u8](self.entry_status)
    }

    fn check_bounds(*self, i: uint) {
        if i >= self^.size {
            panic("table index out of bounds")
        }
    }
}

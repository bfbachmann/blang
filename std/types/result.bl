mod result

use "std/types/opt" {Opt}

/// Represents the result of an operation that may fail. This can either be
/// `Ok(T)` for success, or `Err(E)` for failure.
pub enum Result[T, E] {
    Ok(T)
    Err(E)
}

impl Result {
    /// Converts the result into an optional that contains a value if the result
    /// is `Ok`.
    pub fn ok(self) -> Opt[T] {
        match self {
            let Result::Ok(t) => return Opt::Some(t)
            _ => return Opt::None
        }
    }

    /// Converts the result into an optional that contains an error value if 
    /// the result is `Err`.
    pub fn err(self) -> Opt[E] {
        match self {
            let Result::Err(e) => return Opt::Some(e)
            _ => return Opt::None
        }
    }

    /// Returns true if this is an `Ok` result.
    pub fn is_ok(self) -> bool {
        match self {
            let Result::Ok(_) => return true
            _ => return false
        }
    }

    /// Returns true if this is an `Err` result.
    pub fn is_err(self) -> bool {
        return !self.is_ok()
    }
}
mod array

use "std/allocator" {Allocator}
use "std/types/slice" {Slice, SliceMut}
use "std/types/opt" {Opt}

/// A resizeable array of values of type T.
pub struct Array[T] {
    allocator: Allocator
    data: SliceMut[T]
}

impl Array {
    /// Create a new empty array.
    pub fn new(al: Allocator) -> Array[T]{
        return Array[T].new_with_len(al, 0)
    }

    /// Create a new array that can contain `len` elements.
    pub fn new_with_len(mut al: Allocator, len: uint) -> Array[T] {
        let mut ptr: *mut T = null
        if len > 0 {
            ptr = al.alloc(sizeof T * len) as *mut T
        }

        return Array[T]{
            allocator: al
            data: SliceMut[T].new(ptr, len)
        }
    }

    /// Resize the array so it can hold `len` elements. Be careful with 
    /// this function because it might move all the data in the array,
    /// which would invalidate any existing pointers to its data.
    pub fn resize(*mut self, len: uint) {
        let ptr = self.allocator.realloc(
            self.data.ptr() as *mut u8,
            sizeof T * len,
        ) as *mut T
        self.data = SliceMut[T].new(ptr, len)
    }

    /// Returns the element at index `i` in the list, or None if `i` is out of
    /// bounds.
    pub fn get(self, i: uint) -> Opt[T] {
        return self.data.get(i)
    }

    /// Sets the element at index `i` to `t`. Panics if `i` is out of bounds.
    pub fn set(self, i: uint, t: T) {
        self.data.set(i, t)
    }

    /// Returns the nubmer of elements in the array.
    pub fn len(self) -> uint {
        return self.data.len()
    }

    /// Returns a slice that references the data in the array.
    pub fn as_slice(self) -> Slice[T] {
        return self.data.as_slice()
    }

    /// Returns a mutable slice that references the data in the array.
    pub fn as_slice_mut(self) -> SliceMut[T] {
        return self.data
    }

    /// Copies data from `slice` into the array starting from `offset`. Returns
    /// the number of elements copied.
    pub fn write_at_offset(*mut self, mut offset: uint, slice: Slice[T]) -> uint {
        for let mut i = 0uint; offset + i < self.data.len(); i += 1 {
            match slice.get(i) {
            case let Opt[T]::Some(t):
                self.data.set(i + offset, t)
            case:
                break
            }
        }

        return i
    }

    /// Frees all heap memory allocated for the array.
    pub fn free(mut self) {
        self.allocator.free(self.data.ptr() as *mut u8)
    }
}

struct Ptr[T] {
    ptr: *T
    len: uint
}

impl Ptr {
    pub fn new(ptr: *T, len: uint) -> Ptr[T] {
        return Ptr[T]{
            ptr: ptr
            len: len
        }
    }

    pub fn len(*self) -> uint {
        return PtrMut[T].len(self as *PtrMut[T])
    }

    pub fn ptr(*self, offset: uint) -> *T {
        return PtrMut[T].ptr(self as *PtrMut[T], offset)
    }

    pub fn offset(*self, offset: uint) -> Ptr[T] {
        return PtrMut[T].offset(self as *PtrMut[T], offset)
    }

    pub fn slice(*self, start: uint, end: uint) -> Ptr[T] {
        return PtrMut[T].slice(self as *PtrMut[T], start, end)
    }

    pub fn slice_left(*self, end: uint) -> Ptr[T] {
        return PtrMut[T].slice_left(self as *PtrMut[T], end)
    }

    pub fn slice_right(*self, start: uint) -> Ptr[T] {
        return PtrMut[T].slice_right(self as *PtrMut[T], start)
    }
}

struct PtrMut[T] {
    ptr: *mut T
    len: uint
}

impl PtrMut {
    pub fn new(ptr: *mut T, len: uint) -> PtrMut[T] {
        return PtrMut[T]{
            ptr: ptr
            len: len
        }
    }

    pub fn len(*self) -> uint {
        return self^.len
    }

    pub fn ptr(*self, offset: uint) -> *mut T {
        @panic.assert(offset < self^.len, "offset out of bounds")
        return self^.ptr.(offset as int)
    }

    pub fn offset(*self, offset: uint) -> PtrMut[T] {
        @panic.assert(offset < self^.len, "offset out of bounds")
        
        return PtrMut[T]{
            ptr: self^.ptr.(offset as int)
            len: self^.len - offset
        }
    }

    pub fn slice(*self, start: uint, end: uint) -> PtrMut[T] {
        @panic.assert(start > end, "start must be greater than end")
        @panic.assert(start < self^.len, "start out of bounds")
        @panic.assert(end <= self^.len, "end out of bounds")

        return PtrMut[T]{
            ptr: self^.ptr.(start as int)
            len: start - end
        }
    }

    pub fn slice_left(*self, end: uint) -> PtrMut[T] {
        @panic.assert(end <= self^.len, "end out of bounds")

        return PtrMut[T]{
            ptr: self^.ptr
            len: end
        }
    }

    pub fn slice_right(*self, start: uint) -> PtrMut[T] {
        @panic.assert(start < self^.len, "start out of bounds")

        return PtrMut[T]{
            ptr: self^.ptr.(start as int)
            len: self^.len - start
        }
    }
}
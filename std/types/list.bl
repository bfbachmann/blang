use panic: "std/backtrace/panic.bl"
use mem: "std/libc/mem.bl"
use {Clone}: "std/specs/clone.bl"
use {DynAllocator}: "std/mem/dyn_allocator.bl"
use {Array}: "std/types/array.bl"

/// The minimum capacity of the list once it has been allocated.
const min_cap: uint = 4

/// The factor by which to grow and shrink when resizing.
const growth_factor: uint = 2

/// An array of values of type T that resizes itself automatically.
pub struct List[T] {
    entries: Array[T]
    len: uint
}

impl List {
    /// Returns a new empty list.
    pub fn new(al: *mut DynAllocator) -> List[T] {
        return List[T].with_capacity(al, 0)
    }

    /// Returns a list with enough allocated memory to hold `cap` values of 
    /// type `T`.
    pub fn with_capacity(al: *mut DynAllocator, cap: uint) -> List[T] {
        return List[T] {
            entries: Array[T].new_with_len(al, cap)
            len: 0
        }
    }

    /// Returns the current length of the list.
    pub fn len(*self) -> uint {
        return self^.len
    }

    /// Returns the current capacity of the list (i.e. how many entries it 
    /// could store before it would need to allocate more space for them).
    pub fn capacity(*self) -> uint {
        return self^.entries.len()
    }

    /// Appends `t` to the end of the list.
    pub fn push(*mut self, t: T) {
        if self.is_full() {
            self.grow()
        }

        self^.entries.mut_ptr_at(self^.len)^ = t
        self^.len += 1
    }

    /// Removes the value at the end of the list. Panics if the list if empty.
    pub fn pop(*mut self) {
        @panic.assert(self^.len > 0, "cannot pop from empty list")
        self.remove(self^.len - 1)
    }

    /// Returns a pointer to the value at index `i` in the list.
    /// Panics if `i` is out of bounds.
    pub fn get(*self, i: uint) -> *T {
        self.check_bounds(i)
        return self^.entries.ptr_at(i)
    }

    /// Returns a mutating pointer to the value at index `i` in the list.
    /// Panics if `i` is out of bounds.
    pub fn get_mut(*mut self, i: uint) -> *mut T {
        self.check_bounds(i)
        return self^.entries.mut_ptr_at(i)
    }

    /// Sets the value at index `i` in the list to `t`.
    /// Panics if `i` is out of bounds.
    pub fn set(*mut self, i: uint, t: T) {
        self.get_mut(i)^ = t
    }

    /// Remove the value at index `i` from the list.
    /// Panics if `i` is out of bounds.
    pub fn remove(*mut self, i: uint) {
        self.check_bounds(i)
        
        // We only need to move entries left by one if the element we removed
        // was not the last one.
        let len = self^.len
        let is_last_entry = i + 1 == len
        if !is_last_entry {
            @mem.memmove(
                self^.entries.mut_ptr_at(i) as *mut u8, 
                self^.entries.ptr_at(i + 1) as *u8, 
                (len - 1 - i) * sizeof T,
            )
        }

        self^.len -= 1

        // Check if we should shrink the list to conserve memory.
        let new_cap = self.capacity() / growth_factor
        if new_cap >= min_cap and self^.len * growth_factor <= new_cap {
            self^.entries.resize(new_cap)
        }
    }

    /// Pushes `values` onto the end of the list.
    pub fn extend(*mut self, values: List[T]) {
        let num_values = values.len()
        let num_free_slots = self.capacity() - self^.len
        if num_free_slots < num_values {
            self.grow_to_fit(num_values)
        }

        @mem.memmove(
            self^.entries.mut_ptr_at(self^.len) as *mut u8,
            values.get(0) as *u8,
            num_values * sizeof T,
        )

        values.free()
    }

    /// Frees the memory allocated for this list.
    pub fn free(self) {
        self.entries.free()
    }

    /// Returns true if the list has no elements.
    pub fn is_empty(*self) -> bool {
        return self^.len == 0
    }

    /// Returns true if the list is full.
    pub fn is_full(*self) -> bool {
        return self^.len == self.capacity()
    }

    /// Grows the list by the growth factor.
    fn grow(*mut self) {
        let mut new_cap = self.capacity() * growth_factor
        if new_cap == 0 {
            new_cap = min_cap
        }

        self^.entries.resize(new_cap)
    }

    /// Grows the memory that backs the list so it can fit `count` new values.
    pub fn grow_to_fit(*mut self, count: uint) {
        let cap = self.capacity()
        let num_free = cap - self^.len
        if num_free >= count {
            return
        }

        self^.entries.resize(cap + count - num_free)
    }

    /// Panics if `i` is outside of the array bounds.
    fn check_bounds(*self, i: uint) {
        @panic.assert(i < self^.len, "list index out of bounds")
    }
}

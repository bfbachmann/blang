mod io

use "std/libc" @libc
use "std/types/array" {Array}
use "std/types/slice" {Slice}
use "std/allocator" {Allocator}

/// A growable IO buffer that can be used to temporarily store data in memory.
pub struct Buffer {
    buf: Array[u8]
    cursor: uint
}

impl Buffer {
    /// Creates a new empty buffer.
    pub fn new(al: Allocator) -> Buffer {
        return Buffer{
            buf: Array[u8].new(al)
            cursor: 0
        }
    }

    /// Creates a new buffer with the given capacity.
    pub fn new_with_capacity(al: Allocator, cap: uint) -> Buffer {
        return Buffer{
            buf: Array[u8].new_with_len(al, cap)
            cursor: 0
        }
    }

    /// Returns a writer that can write to this buffer.
    pub fn writer(*mut self) -> Writer {
        return Writer.new(self)
    }

    /// Returns true if the buffer has enough room for a write of the given
    /// size in bytes.
    pub fn can_fit(self, num_bytes: uint) -> bool {
        return self.buf.len() - self.cursor >= num_bytes
    }

    /// Empties the contents of the buffer into `writer`.
    pub fn drain_into[W: Write](*mut self, writer: *mut W) {
        if self.cursor > 0 {
            writer.write(self.buf.as_slice().slice_left(self.cursor))
            self.cursor = 0
        }
    }

    /// Empties the buffer.
    pub fn drain(*mut self) {
        self.cursor = 0
    }

    /// Returns a slice pointing to the data that has been written to the
    /// buffer at the time of this call.
    pub fn as_slice(self) -> Slice[u8] {
        return self.buf.as_slice().slice_left(self.cursor)
    }

    /// Returns the number of bytes written to the buffer.
    pub fn len(self) -> uint {
        return self.cursor
    }

    /// Returns the buffer's capacity (the nubmer of bytes that can be written
    /// to it before it is full).
    pub fn capacity(self) -> uint {
        return self.buf.len()
    }

    /// Grows the memory region assigned to the buffer to fit `num_new` 
    /// additional bytes.
    pub fn grow_to_fit(*mut self, num_new: uint) {
        let mut len = self.buf.len()
        let min_new_len = self.cursor + num_new

        if min_new_len <= len {
            return
        }

        if len < 8 {
            len = 8
        }

        while len < min_new_len {
            len *= 2
        }

        self.buf.resize(len)
    }

    /// Frees all memory associated with the buffer.
    pub fn free(self) {
        self.buf.free()
    }
}

impl Buffer: Write {
    /// Writes `bytes` to the buffer. The buffer will try to grow automatically
    /// if it can't fit all the bytes.
    pub fn write(*mut self, bytes: Slice[u8]) {
        let len = self.buf.len()
        let bytes_len = bytes.len()
        if bytes_len == 0 {
            return
        }

        self.grow_to_fit(bytes_len)
        let start = self.buf.mut_ptr_at(self.cursor)
        @libc.memcpy(start, bytes.ptr_at(0), bytes_len)
        self.cursor += bytes_len
    }
}

impl Buffer: Read {
    /// Copies the contents of the buffer into the given writer. This does not
    /// change the state of the buffer.
    pub fn read(*mut self, writer: *mut Writer) {
        writer.write(self.buf.as_slice().slice_left(self.cursor))
    }
}

/// A buffered writer. Implements the `Write` spec, but buffers all writes to
/// writer `W` in memory. This type should only be used in cases where writes
/// to the underlying writer would be significantly slower than writes to 
/// the buffer (e.g. writing to a file or a network socket). The buffer size
/// is fixed and large so as to accomodate many small writes before flushing
/// the buffer to the underlying writer.
pub struct Buffered[W: Write] {
    writer: W
    buf: Buffer
}

const default_capacity: uint = 1024 * 4

impl Buffered {
    /// Creates a new buffered writer that writes to `W`.
    pub fn new(al: Allocator, writer: W) -> Buffered[W] {
        return Buffered[W]{
            writer: writer
            buf: Buffer.new_with_capacity(al, default_capacity)
        }
    }

    /// Flushes the buffer to the underlying writer.
    pub fn flush(*mut self) {
        self.buf.drain_into(&mut self.writer)
    }

    /// Frees all memory associated with the buffered writer.
    pub fn free(mut self) {
        self.flush()
        self.buf.free()
    }
}

impl Buffered: Write {
    /// Writes `bytes` to this buffered writer. The buffer will only be flushed
    /// to the underlying writer if it can't fit all of `bytes`.
    pub fn write(*mut self, bytes: Slice[u8]) {
        let num_bytes = bytes.len()

        // If the bytes fit in the buffer, just write them to the buffer.
        if self.buf.can_fit(bytes.len()) {
            self.buf.write(bytes)
            return
        }
        
        // We need to flush to free space in the buffer.
        self.flush()

        // If the bytes still don't fit in the buffer, write them directly to
        // the underlying writer.
        if !self.buf.can_fit(bytes.len()) {
            self.writer.write(bytes)
        } else {
            self.buf.write(bytes)
        }
    }
}